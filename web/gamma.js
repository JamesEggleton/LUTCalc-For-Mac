/* gamma.js
* Transfer functions (gamma) web worker object for the LUTCalc Web App.
* 27th June 2015
*
* LUTCalc generates 1D and 3D Lookup Tables (LUTs) for video cameras that shoot log gammas, 
* principally the Sony CineAlta line.
*
* By Ben Turley, http://turley.tv
* First License: GPLv2
* Github: https://github.com/cameramanben/LUTCalc
*/
function LUTGamma() {
	this.nul = false;
	this.gammas = [];
	this.isTrans = false;
	this.ver = 0;
	this.curIn = 0;
	this.curOut = 0;
	this.eiMult = 1;
	this.stopShift = 0;
	this.inL = false;
	this.outL = true;
	this.clip = false;
	
	this.sIn = false;
	this.sMin = 0;
	this.sMax = 1;

	this.bClip = 0;
	this.mClip = 67025937;

	this.linList = [];
	this.inList = [];
	this.outList = [];
	this.catList = [];

	this.doBlkHi = false;
	this.doASCCDL = false;

	this.al = 1;
	this.bl = 0;
	this.ad = 1;
	this.bd = 0;
	this.highRef = 0.9;
	this.asc = new Float64Array([
		1,1,1,	// s - Slope / Gain
		0,0,0,	// o - Offset / Lift
		1,1,1,	// p - Power / Gamma
		1		// sat - Saturation
	]);
	this.gammaList();
}
// Prepare transfer functions
LUTGamma.prototype.gammaList = function() {
	this.SL3 = 0;
	this.gammas.push(new LUTGammaLog(
		'S-Log3', [ 0.1677922920,-0.0155818840, 0.2556207230, 4.7368421060,10.0000000000, 0.4105571850, 0.0526315790, 0.1673609920, 0.0125000000 ]));
	this.gammas.push(new LUTGammaLog(
		'S-Log2', [ 0.330000000129966,-0.0291229262672453,0.3705223107287920,0.7077625570776260,10,0.6162444730868150,0.0375840001141552,0.0879765396,0 ]));
	this.gammas.push(new LUTGammaLog(
		'S-Log', [ 0.3241960136,-0.0286107171, 0.3705223110, 1,10.0000000000, 0.6162444740, 0.0375840000, 0.0882900450, 0.000000000000001 ]));
	this.gammas.push(new LUTGammaArri(
		'LogC (Sup 3.x & 4.x)',3));
	this.gammas.push(new LUTGammaArri(
		'LogC (Sup 2.x)',2));
	this.gammas.push(new LUTGammaLog(
		'C-Log', [ 0.3734467748,-0.0467265867, 0.45310179472141, 10.1596, 10, 0.1251224801564, 1, 0.00391002619746, -0.0452664 ]));
	this.gammas.push(new LUTGammaLog(
		'Canon Log 2 (Approx)', [ 0,0,0.242431278,4.958584184,10,0.392766751,0.05813449,0,0 ]));
	this.gammas.push(new LUTGammaLog(
		'Panasonic V-Log', [ 0.198412698,-0.024801587, 0.241514, 0.9, 10, 0.598206, 0.00873, 0.181, 0.009 ]));
	this.gammas.push(new LUTGammaLog(
		'Panalog', [ 0.324196014, -0.020278938, 0.434198361, 0.956463747, 10, 0.665276427, 0.040913561, 0.088290045, 0 ]));
	this.gammas.push(new LUTGammaLog(
		'BMD Film', [ 0.235007442, -0.021824371, 0.367608584, 3.806255082, 10, 0.424864581, 0.123774409, 0.114884702, 0.005175 ]));
	this.gammas.push(new LUTGammaLog(
		'BMD Film4k', [ 0.335139188, -0.031122728, 0.582240631, 2.733951639, 10, 0.477563161, 0.218018711, 0.10830634, 0.005175 ]));
//	this.gammas.push(new LUTGammaLog(
//		'RedLog', [ 0.054934837, -0.003437557, 0.427733972, 3.334384833, 10, 0.693295949, 0.033527711, 0.068022346, 0.0003 ]));
	this.gammas.push(new LUTGammaLog(
		'Cineon', [ 0.0000000000, 0.0000000000, 0.1260649940,22.2791018600, 2.6907845340, 0.2595160220, 0.2702335160, 0.0000000000, 0 ]));
	this.gammas.push(new LUTGammaACEScc(
		'ACEScc', {}));
	this.gammas.push(new LUTGammaACESProxy(
		'ACESproxy10', 10));
	this.gammas.push(new LUTGammaACESProxy(
		'ACESproxy12', 12));
	this.rec709 = this.gammas.length;
	this.gammas.push(new LUTGammaGam(
		'Rec709', [ 1/0.45, 4.50000000, 0.09900000, 0.01800000, 0.08100000 ]));
	this.gammas.push(new LUTGammaGam(
		'Rec2020 12-bit', [ 1/0.45, 4.50000000, 0.09930000, 0.01810000, 0.08145000 ]));
	this.gammas.push(new LUTGammaGam(
		'sRGB', [ 2.40000000,12.92000000, 0.05500000, 0.00313080, 0.04015966 ]));
	this.gammas.push(new LUTGammaLin(
		'Scene Linear IRE', 0.2));
	this.gammas.push(new LUTGammaLin(
		'Scene Reflectance', 0.18));
	this.gammas.push(new LUTGammaLUT(
		'Rec709 (800%)',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array([	0.07239609, 0.07447394, 0.07686249, 0.07949977, 0.08219600, 0.08567028, 0.09029758, 0.09875797, 0.10914082, 0.11883999,
					0.12866034, 0.14015402, 0.15348694, 0.16661814, 0.18004893, 0.19509241, 0.21196180, 0.22823182, 0.24534958, 0.26438452,
					0.28434109, 0.30597769, 0.32733539, 0.35083275, 0.37726131, 0.40365049, 0.43183059, 0.46184950, 0.49470951, 0.52865390,
					0.56485880, 0.60500363, 0.64559087, 0.68000971, 0.71766200, 0.75151050, 0.78401661, 0.81486195, 0.84112764, 0.86582068,
					0.88798658, 0.90701682, 0.92138640, 0.93687713, 0.94946030, 0.95992064, 0.96842281, 0.97612828, 0.98187260, 0.98701779,
					0.99013136, 0.99295086, 0.99486435, 0.99732630, 0.99903882, 1.00259821, 1.00607800, 1.00955872, 1.01304026, 1.01652250,
					1.02000536, 1.02348875, 1.02697261, 1.03045687, 1.03394148])
		}));
	this.gammas.push(new LUTGammaLUT(
		'LC709',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array(
				[ 0.0681458330432062,0.0691434801575758,0.0705829599217986,0.0724372206445259,0.0747874173998045,0.0776429161732649,0.0811920325388074,0.0855419981338221,
				  0.0909454307534702,0.0976690797726784,0.1057777820895406,0.1155958029012708,0.1266116066854350,0.1383486226503910,0.1510262218009775,0.1646815963955523,
				  0.1793847118819159,0.1951918111528836,0.2121812541317693,0.2304357320288367,0.2499984938760508,0.2709281624411535,0.2932613077270772,0.3170617964918866,
				  0.3423063612379277,0.3695615137341154,0.3971217829388074,0.4231725001074290,0.4486077701176930,0.4736812772283969,0.4984996145517106,0.5232706256325024,
				  0.5479442434314760,0.5725367356025903,0.5970569416109482,0.6215751675531770,0.6459232811886606,0.6699759671530302,0.6936750809141740,0.7170080478474583,
				  0.7397128428660801,0.7617580170455522,0.7824392672742913,0.8009083916954056,0.8175656376203322,0.8324964241259040,0.8457970340590418,0.8575570277373410,
				  0.8678819918256108,0.8768748757833822,0.8846331515440858,0.8912549486405668,0.8968412437341152,0.9014929560172531,0.9053083874291300,0.9083859090127075,
				  0.9108262326490713,0.9127307504679862,0.9141957927663734,0.9153135383675464,0.9161978338220919,0.9170093433528834,0.9176997927663735,0.9182731424731183,
				  0.9187333528836756 ]
			)
		}));
	this.gammas.push(new LUTGammaLUT(
		'LC709A',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array(
				[ 0.0690751760484848,0.0728297103786901,0.0769850051182796,0.0815808343707722,0.0864978758256109,0.0915715413065494,0.0969774025141740,0.1028781916478983,
				  0.1091478390349951,0.1155131300480449,0.1225782317505376,0.1309263253436461,0.1403471537869012,0.1508689079248778,0.1623594253036168,0.1746108013986315,
				  0.1878784532660801,0.2022370183965786,0.2180209309622678,0.2356278321531769,0.2549427384062561,0.2761380900003911,0.2987492565998045,0.3224798721943793,
				  0.3469975840860214,0.3719286248248777,0.3971008726561094,0.4222027128650537,0.4472788568813294,0.4722718767181329,0.4971765759100684,0.5219774783500978,
				  0.5466479949763440,0.5711842754669599,0.5955026274948191,0.6197116512439393,0.6432306188590422,0.6651852019544967,0.6865648023053763,0.7082626223616812,
				  0.7296929317130010,0.7507956301978983,0.7708870295194525,0.7891859348525904,0.8059247656203324,0.8210325331867545,0.8346382669036169,0.8468258306587488,
				  0.8576597322080157,0.8672077039163734,0.8755439358443793,0.8827308391279569,0.8888714829059629,0.8940610364006844,0.8983856104977517,0.9019299878681326,
				  0.9047933223781036,0.9070732102109482,0.9088591070866080,0.9102383165201858,0.9113148913094820,0.9121898344043498,0.9129595988637339,0.9137217752193059,
				  0.9145739540027369 ]
			)
		}));
	this.gammas.push(new LUTGammaIOLUT(
		'Nikon Standard',
		{
			rec: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	-0.342551352061, -0.288177568708, -0.233803785356, -0.179430002004, -0.125056218652, -0.070682435300, -0.016308651953, 0.038065131380, 0.090182450305,
						0.114844812055, 0.147037855967, 0.170190534243, 0.182505160319, 0.195266314669, 0.203853784990, 0.211095737876, 0.219221792780, 0.227999341155,
						0.236282183331, 0.243254666213, 0.249799997985, 0.256337363135, 0.262712725704, 0.268527439248, 0.273815628826, 0.278801564019, 0.283644789095,
						0.288392421002, 0.293133710416, 0.297755513447, 0.302175617216, 0.306502426672, 0.310752741262, 0.314959622924, 0.319114515832, 0.323165229840,
						0.327112045597, 0.330908933709, 0.334586176331, 0.338175148420, 0.341680833810, 0.345139426450, 0.348544714039, 0.351947325653, 0.355371475627,
						0.358794773339, 0.362214961661, 0.365622412467, 0.368960430415, 0.372229078201, 0.375549771636, 0.378978477443, 0.382437665513, 0.385876364569,
						0.389311177226, 0.392717070632, 0.396099211847, 0.399596228751, 0.403257717617, 0.406948529183, 0.410631822241, 0.414307485422, 0.417949748127,
						0.421597747322, 0.425300362807, 0.429011956465, 0.432665489009, 0.436293179570, 0.439950131174, 0.443618495668, 0.447217356045, 0.450752752428,
						0.454308147167, 0.457896600163, 0.461486503027, 0.465077971802, 0.468649625500, 0.472179139518, 0.475681843863, 0.479172398173, 0.482643830686,
						0.486071715900, 0.489456560345, 0.492829660552, 0.496199806504, 0.499557029186, 0.502883973225, 0.506202425833, 0.509583182445, 0.513027270364,
						0.516439758293, 0.519795229070, 0.523139387370, 0.526486431936, 0.529841782722, 0.533239406650, 0.536673918577, 0.540201395758, 0.543843468628,
						0.547563839344, 0.551365664452, 0.555211858630, 0.559065206970, 0.562987330755, 0.567008663481, 0.571141048171, 0.575388384633, 0.579852755032,
						0.584596219521, 0.589656886066, 0.595013785817, 0.600608182746, 0.606593136633, 0.612862738119, 0.619558115806, 0.627134629835, 0.635771882841,
						0.646090898198, 0.702378530367, 0.761472498521, 0.820637751415, 0.879845357987, 0.939077825206, 0.998324880860, 1.057576659021, 1.116828424985,
						1.176080190950, 1.235331956914, 1.294583722879  ]
				)
			},
			out: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	0.049218249549, 0.050340760298, 0.051463271048, 0.052585781797, 0.053708292546, 0.054830803295, 0.055953314045, 0.057075824794, 0.058198335543,
						0.059320846293, 0.060443357042, 0.061565867791, 0.063440922871, 0.065939828995, 0.068461377294, 0.071083719271, 0.073457071312, 0.075178362835,
						0.076926716563, 0.078377767373, 0.079774496126, 0.082090196935, 0.087053858463, 0.091985226944, 0.096851206605, 0.101597266466, 0.108640869604,
						0.117026469673, 0.124564288309, 0.131532001666, 0.138653050872, 0.147207407755, 0.156488919267, 0.165859362460, 0.175652722265, 0.186927260407,
						0.199243267088, 0.212044116616, 0.225041844751, 0.238895615805, 0.253240133306, 0.267917983908, 0.283304261071, 0.299792645427, 0.317160501155,
						0.335057795993, 0.352889810206, 0.370819575819, 0.389352213885, 0.407101174185, 0.424871237485, 0.442772100713, 0.459451481748, 0.476039712868,
						0.492777153962, 0.509246934718, 0.526027527985, 0.542712928580, 0.559913284646, 0.576928975938, 0.593971033204, 0.611344689037, 0.628930013031,
						0.646950916067, 0.665096433879, 0.683435767729, 0.701243173150, 0.719444395779, 0.737622227049, 0.755320491138, 0.772001056736, 0.787997434894,
						0.803729034995, 0.818764033383, 0.832972783544, 0.845877373044, 0.857555748351, 0.868473696665, 0.878489111063, 0.887958347868, 0.896363952038,
						0.903591827347, 0.910315723114, 0.915372062462, 0.918298748293, 0.918941618409, 0.918972202977, 0.919075471565, 0.919879717190, 0.920939802190,
						0.921973664508, 0.923007251183, 0.924040581079, 0.925073671761, 0.926106539583, 0.927139199777, 0.928171666527, 0.929203953044, 0.930236071632,
						0.931268033751, 0.932299850078, 0.933331530557, 0.934363084451, 0.935394520390, 0.936425846414, 0.937457070013, 0.938488198167, 0.939519237376,
						0.940550193699, 0.941581072781, 0.942611879880, 0.943642619897, 0.944673297399, 0.945703916640, 0.946734481587, 0.947764995932, 0.948795463120,
						0.949825886359, 0.950856268638, 0.951886612744, 0.952916921275, 0.953947196648, 0.954977441120, 0.956007656792, 0.957037845623, 0.958068009437,
						0.959098149936, 0.960128268706, 0.961158367223  ]
				)
			}
		}));
	this.gammas.push(new LUTGammaIOLUT(
		'Nikon Neutral',
		{
			rec: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	-0.342551352061, -0.288177568708, -0.233803785356, -0.179430002004, -0.125056218652, -0.070682435300, -0.016308651953, 0.038065131380, 0.090370277129,
						0.111261816878, 0.130837070772, 0.154724281799, 0.167748578657, 0.175153042048, 0.183813600540, 0.193613893606, 0.201845384547, 0.208862712809,
						0.216240385882, 0.223891266282, 0.231266341219, 0.238137235412, 0.244526657912, 0.250600574579, 0.256676156574, 0.262573904298, 0.268179682113,
						0.273510523045, 0.278725079401, 0.283798074261, 0.288755859858, 0.293711495514, 0.298540024556, 0.303202660636, 0.307723722115, 0.312136686485,
						0.316510929668, 0.320823103675, 0.325061599754, 0.329250845847, 0.333404903584, 0.337481786689, 0.341478003981, 0.345410076747, 0.349276802698,
						0.353155050352, 0.357055174830, 0.360924326908, 0.364761909620, 0.368534160768, 0.372219561935, 0.375965970561, 0.379837133354, 0.383697823226,
						0.387509788827, 0.391294383841, 0.395027283063, 0.398805761668, 0.402714808096, 0.406648722824, 0.410557207556, 0.414440514338, 0.418281270173,
						0.422101311085, 0.425921487535, 0.429708258188, 0.433414855526, 0.437113588260, 0.440894188305, 0.444702269231, 0.448484157653, 0.452247923518,
						0.455979626530, 0.459680464278, 0.463339649468, 0.466960507431, 0.470544248238, 0.474091256304, 0.477614456193, 0.481114289829, 0.484597025237,
						0.488049600937, 0.491511604916, 0.495056838882, 0.498638495167, 0.502143788814, 0.505593447821, 0.509025317989, 0.512445400947, 0.515831817485,
						0.519169669140, 0.522481361650, 0.525786987556, 0.529082557203, 0.532387937393, 0.535693607451, 0.539042131765, 0.542445907579, 0.545931580767,
						0.549599723684, 0.553417839780, 0.557224827183, 0.561055098051, 0.564975986003, 0.568990380621, 0.573121964995, 0.577399927778, 0.581947100667,
						0.586726717568, 0.591716948652, 0.596740236407, 0.601900927218, 0.607552931270, 0.614097227575, 0.621247444919, 0.628629296746, 0.636894410971,
						0.647118201427, 0.701473594388, 0.759117452800, 0.816827933730, 0.874580070648, 0.932356983196, 0.990148625585, 1.047946225923, 1.105743851253,
						1.163541476583, 1.221339101914, 1.279136727244  ]
				)
			},
			out: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	0.049218249549, 0.050340760298, 0.051463271048, 0.052585781797, 0.053708292546, 0.054830803295, 0.055953314045, 0.057075824794, 0.058198335543,
						0.059320846293, 0.060443357042, 0.061565867791, 0.063424532172, 0.066451860312, 0.069540979037, 0.072767011953, 0.075906919979, 0.078853518191,
						0.081631137728, 0.084115161140, 0.086479804114, 0.090146659344, 0.098326897931, 0.105813214308, 0.112411325511, 0.118632105327, 0.126340654717,
						0.135121024858, 0.143188481435, 0.151214506061, 0.159704595685, 0.168946154075, 0.178917743693, 0.188988933153, 0.199496185802, 0.210829472801,
						0.222607262009, 0.234859080761, 0.247268132837, 0.260349232373, 0.274083476359, 0.288130112770, 0.302582467828, 0.317331828344, 0.332620806037,
						0.348365834915, 0.364049610993, 0.379997823816, 0.396454197491, 0.412256458371, 0.428299584401, 0.444563625444, 0.460140581966, 0.475797913493,
						0.491724507182, 0.507769291577, 0.524243967159, 0.540321153567, 0.556518544281, 0.572986274856, 0.589827764317, 0.607037655073, 0.624500979893,
						0.642132788801, 0.659260502589, 0.676925684511, 0.694832172329, 0.713193903044, 0.731687117698, 0.750046927552, 0.767681303891, 0.783847467497,
						0.799775652757, 0.815021702518, 0.829406565570, 0.842479215886, 0.854706468324, 0.866698387523, 0.877330903455, 0.886205655894, 0.894607432632,
						0.902626621574, 0.909273722489, 0.914867761327, 0.918285650651, 0.918940220570, 0.918992912762, 0.919122306060, 0.919952578245, 0.921038681814,
						0.922098555256, 0.923158146120, 0.924217473745, 0.925276556137, 0.926335410063, 0.927394051136, 0.928452493899, 0.929510751894, 0.930568837735,
						0.931626763171, 0.932684539147, 0.933742175856, 0.934799682795, 0.935857068813, 0.936914342150, 0.937971510485, 0.939028580973, 0.940085560280,
						0.941142454614, 0.942199269764, 0.943256011120, 0.944312683707, 0.945369292206, 0.946425840978, 0.947482334089, 0.948538775326, 0.949595168219,
						0.950651516058, 0.951707821906, 0.952764088621, 0.953820318865, 0.954876515118, 0.955932679692, 0.956988814742, 0.958044922274, 0.959101004161,
						0.960157062147, 0.961213097856, 0.962269112803  ]
				)
			}
		}));
	this.gammas.push(new LUTGammaIOLUT(
		'Nikon Vivid',
		{
			rec: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	-0.342551352061, -0.288177568708, -0.233803785356, -0.179430002004, -0.125056218652, -0.070682435300, -0.016308651953, 0.038065131380, 0.090022266287,
						0.124983618100, 0.174358067479, 0.200885292861, 0.210394128231, 0.219679538515, 0.229782588225, 0.237527072241, 0.243640168554, 0.250127754776,
						0.257349865517, 0.264748252859, 0.270564224518, 0.275807100363, 0.280794974454, 0.285678082679, 0.290496609151, 0.295301613189, 0.299695171061,
						0.303797972903, 0.307751983351, 0.311586237919, 0.315404817492, 0.319170201075, 0.322828977424, 0.326392115832, 0.329816995605, 0.333116458736,
						0.336347797973, 0.339521970675, 0.342645003881, 0.345727309828, 0.348765618565, 0.351808171675, 0.354882352416, 0.357954246165, 0.360988936855,
						0.363995548567, 0.366968530013, 0.369872023109, 0.372746601324, 0.375718615365, 0.378835757890, 0.382015542918, 0.385197001913, 0.388398496231,
						0.391560845343, 0.394665368289, 0.397769976495, 0.400928640905, 0.404115357104, 0.407272557992, 0.410397071901, 0.413502895037, 0.416589818624,
						0.419660824008, 0.422740719992, 0.425840284669, 0.428929810665, 0.431975923618, 0.434993999602, 0.438037471593, 0.441136068781, 0.444236363145,
						0.447275819442, 0.450270537122, 0.453286432626, 0.456347163141, 0.459436026617, 0.462554221976, 0.465705641406, 0.468868557494, 0.472022133151,
						0.475193176007, 0.478429604773, 0.481730408691, 0.485010213005, 0.488233925164, 0.491463556240, 0.494758069364, 0.498091267968, 0.501401033442,
						0.504676474735, 0.507998529829, 0.511426279031, 0.514894259405, 0.518319250205, 0.521742852369, 0.525265607959, 0.528889614943, 0.532532949141,
						0.536178537282, 0.539893166950, 0.543690024018, 0.547605615691, 0.551688497347, 0.555854084117, 0.560050009191, 0.564521264881, 0.569347955800,
						0.574322784361, 0.579510092645, 0.584961457677, 0.590754171202, 0.597105965002, 0.604106477697, 0.611752014152, 0.620589041280, 0.630734397016,
						0.641901685999, 0.704513814536, 0.767045464082, 0.829654095144, 0.892306570909, 0.954983997519, 1.017675103286, 1.080368518869, 1.143061934456,
						1.205755350042, 1.268448765629, 1.331142181216  ]
				)
			},
			out: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	0.049218249549, 0.050340760298, 0.051463271048, 0.052585781797, 0.053708292546, 0.054830803295, 0.055953314045, 0.057075824794, 0.058198335543,
						0.059320846293, 0.060443357042, 0.061565867791, 0.063422106433, 0.065166902090, 0.066857240455, 0.068727634913, 0.070315430976, 0.071522246881,
						0.072621736604, 0.073632345620, 0.074546172578, 0.075767169852, 0.077558928054, 0.079330994587, 0.081062569715, 0.082816923899, 0.087517230265,
						0.094217660090, 0.100822872848, 0.106844083563, 0.113466488200, 0.123209893266, 0.132666302326, 0.141121837628, 0.149492480790, 0.160487736691,
						0.172594382415, 0.185184084790, 0.198017570112, 0.212665734218, 0.228431904394, 0.244606313346, 0.261721930295, 0.280252238739, 0.299659730327,
						0.319685136453, 0.339583171500, 0.359954596243, 0.380963884464, 0.400400861762, 0.419544431276, 0.439164017255, 0.458393958826, 0.477973742903,
						0.497810160738, 0.517555133739, 0.537693887480, 0.557430697093, 0.577710884416, 0.597523047859, 0.616894400479, 0.636145035402, 0.654723587302,
						0.673606897408, 0.691989257762, 0.710506630240, 0.728218016286, 0.745983563913, 0.762868835952, 0.779520832114, 0.795442039283, 0.810311738796,
						0.824686064119, 0.837470043276, 0.849512612712, 0.860724908386, 0.870992043119, 0.880028241330, 0.888298577234, 0.895604283736, 0.901898605243,
						0.907772519766, 0.913241598575, 0.917684640033, 0.918890180731, 0.918814825701, 0.918933210545, 0.918973452193, 0.919720908703, 0.920724222029,
						0.921701328915, 0.922678175291, 0.923654778984, 0.924631156594, 0.925607323580, 0.926583294335, 0.927559082266, 0.928534699858, 0.929510158739,
						0.930485469742, 0.931460642955, 0.932435687778, 0.933410612965, 0.934385426672, 0.935360136499, 0.936334749524, 0.937309272342, 0.938283711099,
						0.939258071520, 0.940232358939, 0.941206578328, 0.942180734318, 0.943154831224, 0.944128873068, 0.945102863597, 0.946076806303, 0.947050704440,
						0.948024561041, 0.948998378932, 0.949972160744, 0.950945908934, 0.951919625787, 0.952893313435, 0.953866973864, 0.954840608925, 0.955814220343,
						0.956787809726, 0.957761378572, 0.958734928277  ]
				)
			}
		}));
	this.gammas.push(new LUTGammaIOLUT(
		'Nikon Monochrome',
		{
			rec: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	-0.342551352061, -0.288177568708, -0.233803785356, -0.179430002004, -0.125056218652, -0.070682435300, -0.016308651953, 0.038065131380, 0.090129558931,
						0.118513428992, 0.161557439104, 0.183585697405, 0.200093975652, 0.208057578622, 0.215970131333, 0.225002608116, 0.233879495392, 0.240662071274,
						0.247338185443, 0.254230227189, 0.261105306305, 0.267394020451, 0.272873708978, 0.278074662081, 0.283101734765, 0.288019832776, 0.292944821742,
						0.297672426491, 0.302032614613, 0.306221352992, 0.310269266663, 0.314275256213, 0.318250784779, 0.322119607870, 0.325888885467, 0.329541475946,
						0.333079047674, 0.336554832203, 0.339984067915, 0.343360976958, 0.346693108790, 0.349974270211, 0.353182034904, 0.356320329348, 0.359418720617,
						0.362492160458, 0.365529954410, 0.368516385984, 0.371436781625, 0.374369295393, 0.377384246411, 0.380449869114, 0.383514484285, 0.386579658573,
						0.389634808054, 0.392647838871, 0.395627110133, 0.398638883870, 0.401722968051, 0.404834439823, 0.407921483765, 0.410994007883, 0.414057208753,
						0.417103783757, 0.420145602950, 0.423212741133, 0.426311460699, 0.429399300683, 0.432442612510, 0.435466396352, 0.438510650641, 0.441585590904,
						0.444654826762, 0.447678826870, 0.450678493363, 0.453724102095, 0.456831012284, 0.459983753466, 0.463189922895, 0.466448049052, 0.469692451023,
						0.472914434645, 0.476132751775, 0.479351891463, 0.482571917094, 0.485795265077, 0.489003126931, 0.492300997063, 0.495805683520, 0.499380185386,
						0.502849518582, 0.506282440542, 0.509735949913, 0.513204774156, 0.516641723170, 0.520030088579, 0.523424396172, 0.526834100575, 0.530287729731,
						0.533858145421, 0.537543411008, 0.541400840406, 0.545443580335, 0.549638874781, 0.553990299209, 0.558400834273, 0.562991914893, 0.567987937632,
						0.572992749012, 0.578023423534, 0.583389324988, 0.589449547730, 0.596237282899, 0.603370029808, 0.610812834357, 0.618810651619, 0.628449397199,
						0.641209364072, 0.656079610743, 0.670851711888, 0.685633413195, 0.700423865429, 0.715221980601, 0.730026806070, 0.744837506804, 0.759653351062,
						0.774473698233, 0.789297986894, 0.804125719542  ]
				)
			},
			out: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	0.049218249549, 0.050340760298, 0.051463271048, 0.052585781797, 0.053708292546, 0.054830803295, 0.055953314045, 0.057075824794, 0.058198335543,
						0.059320846293, 0.060443357042, 0.061565867791, 0.063411298637, 0.065473225005, 0.067709381852, 0.069944812343, 0.071995254172, 0.073304162528,
						0.074720219671, 0.076007169791, 0.077253960239, 0.078699062445, 0.081546572735, 0.084481566293, 0.087397030027, 0.090312742629, 0.096416171392,
						0.104602992261, 0.111880792294, 0.118525378827, 0.125502768452, 0.134622916852, 0.143692343699, 0.152481137891, 0.161711453810, 0.172700686416,
						0.184604076215, 0.196978236277, 0.209564548601, 0.223672279297, 0.238726919005, 0.254134628935, 0.270374429331, 0.287668992396, 0.305595138142,
						0.324155748053, 0.343639382930, 0.363686479761, 0.384465305893, 0.404456370194, 0.424425227873, 0.444796339648, 0.464510678743, 0.484388513840,
						0.504418236358, 0.524172308005, 0.544292886223, 0.564185830752, 0.584416939007, 0.603905098281, 0.622720493201, 0.641667395658, 0.660613507070,
						0.679425795473, 0.696693040387, 0.714409322616, 0.732049896563, 0.750029943547, 0.767754182324, 0.784375558828, 0.799577226262, 0.813738486503,
						0.827318392881, 0.839525636331, 0.851714184079, 0.862831025734, 0.872171976419, 0.880858961930, 0.889141803850, 0.896959604445, 0.903627190101,
						0.909264232179, 0.913744505556, 0.917827820241, 0.921965195577, 0.926097506034, 0.930228497746, 0.934358028270, 0.938486197832, 0.942613099722,
						0.946738820786, 0.950863441875, 0.954987038264, 0.959109680045, 0.963231432487, 0.967352356368, 0.971472508295, 0.975591940984, 0.979710703538,
						0.983828841690, 0.987946398044, 0.992063412282, 0.996179921373, 1.000295959754, 1.004411559510, 1.008526750532, 1.012641560668, 1.016756015863,
						1.020870140294, 1.024983956485, 1.029097485424, 1.033210746667, 1.037323758437, 1.041436537713, 1.045549100319, 1.049661460998, 1.053773633490,
						1.057885630599, 1.061997464257, 1.066109145582, 1.070220684937, 1.074332091976, 1.078443375701, 1.082554544497, 1.086665606179, 1.090776568032,
						1.094887436845, 1.098998218942, 1.103108920220  ]
				)
			}
		}));
	this.gammas.push(new LUTGammaIOLUT(
		'Nikon Portrait',
		{
			rec: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	-0.342551352061, -0.288177568708, -0.233803785356, -0.179430002004, -0.125056218652, -0.070682435300, -0.016308651953, 0.038065131380, 0.090377297204,
						0.111226442710, 0.130633567550, 0.154389555468, 0.167484430608, 0.174839594233, 0.183469996634, 0.193294111001, 0.201590147870, 0.208632209126,
						0.215987405560, 0.223629338832, 0.231017469096, 0.237919995757, 0.244328495635, 0.250389900549, 0.256464961207, 0.262363127247, 0.267986335890,
						0.273335963136, 0.278548689567, 0.283619640858, 0.288574227782, 0.293525082167, 0.298362229115, 0.303041988045, 0.307568668181, 0.311976904229,
						0.316346477308, 0.320656949316, 0.324898573361, 0.329092080323, 0.333253752423, 0.337335390357, 0.341329550890, 0.345261031804, 0.349127299667,
						0.353006646136, 0.356915623834, 0.360789759371, 0.364625604109, 0.368397738648, 0.372080006233, 0.375820505631, 0.379695767711, 0.383563170183,
						0.387373448545, 0.391156890498, 0.394891149850, 0.398666495274, 0.402574220925, 0.406510206401, 0.410414856020, 0.414296056300, 0.418138859891,
						0.421960984406, 0.425782809615, 0.429572667473, 0.433281562063, 0.436977734201, 0.440756156341, 0.444565180033, 0.448345285966, 0.452106942345,
						0.455840644695, 0.459545962435, 0.463207496528, 0.466829072947, 0.470414623672, 0.473964223990, 0.477488781828, 0.480988569456, 0.484470908978,
						0.487924337343, 0.491384406479, 0.494925495146, 0.498507119369, 0.502014399827, 0.505463972776, 0.508895331480, 0.512316255254, 0.515704743895,
						0.519044770981, 0.522357771953, 0.525665262942, 0.528962750745, 0.532271028161, 0.535581223979, 0.538931946024, 0.542336228199, 0.545819335767,
						0.549487438103, 0.553313651701, 0.557125889811, 0.560955468698, 0.564878349439, 0.568897239861, 0.573033256488, 0.577313495907, 0.581857451013,
						0.586635041242, 0.591627926730, 0.596657408025, 0.601816456841, 0.607467824225, 0.614007423583, 0.621166374566, 0.628556362922, 0.636811644190,
						0.647065080028, 0.699367091432, 0.753605174839, 0.807897396769, 0.862229480648, 0.916586008425, 0.970957527998, 1.025337298823, 1.079717878082,
						1.134098457344, 1.188479036605, 1.242859615866  ]
				)
			},
			out: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	0.049218249549, 0.050340760298, 0.051463271048, 0.052585781797, 0.053708292546, 0.054830803295, 0.055953314045, 0.057075824794, 0.058198335543,
						0.059320846293, 0.060443357042, 0.061565867791, 0.063423136263, 0.066462881746, 0.069554089606, 0.072792511194, 0.075979139105, 0.078932975596,
						0.081758133236, 0.084242338721, 0.086596467332, 0.090414496703, 0.098632787117, 0.106105448010, 0.112691707091, 0.118886717045, 0.126607307194,
						0.135381970506, 0.143446256435, 0.151488012869, 0.159970471694, 0.169194405121, 0.179186968869, 0.189265265898, 0.199781372605, 0.211087600159,
						0.222882010816, 0.235146602782, 0.247564852184, 0.260618796978, 0.274368775975, 0.288433493799, 0.302881118328, 0.317614474157, 0.332918076574,
						0.348667044053, 0.364322697224, 0.380282324822, 0.396752589681, 0.412531634149, 0.428585041949, 0.444846606680, 0.460417216218, 0.476090075277,
						0.492011628887, 0.508051391505, 0.524528209215, 0.540603806442, 0.556812950525, 0.573270231981, 0.590112805234, 0.607317141768, 0.624784484757,
						0.642417689555, 0.659550111550, 0.677221493533, 0.695127386540, 0.713484669929, 0.731966315749, 0.750300629233, 0.767925373457, 0.784054829694,
						0.799974605754, 0.815195868133, 0.829558770206, 0.842627040471, 0.854840162809, 0.866820716862, 0.877438793785, 0.886299046904, 0.894688794916,
						0.902697672504, 0.909338504065, 0.914892130237, 0.918231731742, 0.918915083032, 0.919043476065, 0.919239149469, 0.920136059151, 0.921288779755,
						0.922415251170, 0.923541422251, 0.924667313553, 0.925792944212, 0.926918332049, 0.928043493659, 0.929168444498, 0.930293198958, 0.931417770448,
						0.932542171453, 0.933666413606, 0.934790507742, 0.935914463954, 0.937038291645, 0.938161999576, 0.939285595908, 0.940409088244, 0.941532483668,
						0.942655788782, 0.943779009735, 0.944902152257, 0.946025221689, 0.947148223006, 0.948271160844, 0.949394039523, 0.950516863068, 0.951639635232,
						0.952762359509, 0.953885039159, 0.955007677216, 0.956130276510, 0.957252839678, 0.958375369175, 0.959497867293, 0.960620336166, 0.961742777781,
						0.962865193993, 0.963987586528, 0.965109956997  ]
				)
			}
		}));
	this.gammas.push(new LUTGammaIOLUT(
		'Nikon Landscape',
		{
			rec: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	-0.342551352061, -0.288177568708, -0.233803785356, -0.179430002004, -0.125056218652, -0.070682435300, -0.016308651953, 0.038065131380, 0.090014281627,
						0.125262756783, 0.175394871323, 0.201468245826, 0.210914156758, 0.220255090663, 0.230320004433, 0.237899490783, 0.244037210321, 0.250534903571,
						0.257758397707, 0.265125636355, 0.270861063964, 0.276088839523, 0.281077811268, 0.285962815933, 0.290792094924, 0.295589187329, 0.299952875638,
						0.304038876382, 0.307985999261, 0.311823369684, 0.315647582100, 0.319412786133, 0.323068235362, 0.326624111035, 0.330039441071, 0.333332259731,
						0.336562154474, 0.339737539911, 0.342863954371, 0.345947530923, 0.348988934054, 0.352034941511, 0.355105612192, 0.358169762222, 0.361200953136,
						0.364207980690, 0.367181171002, 0.370081303694, 0.372961364740, 0.375946473112, 0.379070635127, 0.382250836990, 0.385437951772, 0.388644687165,
						0.391806775547, 0.394912899124, 0.398023732258, 0.401189225678, 0.404377387650, 0.407533994910, 0.410661186470, 0.413769752051, 0.416856569741,
						0.419928375398, 0.423011688238, 0.426113673928, 0.429202840995, 0.432247581554, 0.435269097809, 0.438320205573, 0.441423089653, 0.444521471455,
						0.447557800230, 0.450556342802, 0.453581499220, 0.456648032790, 0.459742607442, 0.462868813548, 0.466028335421, 0.469195953395, 0.472352862884,
						0.475531499554, 0.478780564930, 0.482087135150, 0.485363351397, 0.488586918940, 0.491824446382, 0.495130114255, 0.498468340983, 0.501777107483,
						0.505058400010, 0.508397188549, 0.511840110704, 0.515312142846, 0.518738499960, 0.522176040842, 0.525720612003, 0.529356285838, 0.532997521466,
						0.536642367114, 0.540365200664, 0.544175285378, 0.548107328251, 0.552192349558, 0.556349227616, 0.560560482382, 0.565069214291, 0.569899347725,
						0.574871037285, 0.580070468084, 0.585551663364, 0.591351930507, 0.597726675336, 0.604734853205, 0.612436678142, 0.621316593050, 0.631412155268,
						0.642407361803, 0.705185166051, 0.768799223484, 0.832491771003, 0.896228587957, 0.959990352659, 1.023765329935, 1.087542056186, 1.151318782440,
						1.215095508694, 1.278872234948, 1.342648961202  ]
				)
			},
			out: {
				format: 'cube',
				size: 129,
				min: [0,0,0],
				max: [1,1,1],
				lut: new Float64Array(
					[	0.049218249549, 0.050340760298, 0.051463271048, 0.052585781797, 0.053708292546, 0.054830803295, 0.055953314045, 0.057075824794, 0.058198335543,
						0.059320846293, 0.060443357042, 0.061565867791, 0.063424602387, 0.065158719093, 0.066844337216, 0.068684208620, 0.070266797005, 0.071428317343,
						0.072543802315, 0.073565478875, 0.074487180884, 0.075615127884, 0.077358107033, 0.079057203638, 0.080785142809, 0.082568609461, 0.087086590075,
						0.093769852277, 0.100367927146, 0.106434856177, 0.113007625398, 0.122717469882, 0.132201743401, 0.140683305794, 0.149045991690, 0.160057857913,
						0.172146745702, 0.184714602362, 0.197531016229, 0.212198748641, 0.227944458602, 0.244092918950, 0.261202823820, 0.279731408185, 0.299105025428,
						0.319106165979, 0.339034794480, 0.359391749047, 0.380382823923, 0.399821157211, 0.418933430124, 0.438529485049, 0.457746216431, 0.477300192906,
						0.497127504497, 0.516859464506, 0.536977578582, 0.556704529271, 0.576955897034, 0.596747644730, 0.616086030400, 0.635316040970, 0.653874499813,
						0.672741331452, 0.691099597289, 0.709588441640, 0.727270882484, 0.745001904949, 0.761868035665, 0.778540245167, 0.794460294454, 0.809377586481,
						0.823762555425, 0.836596499610, 0.848686298910, 0.859908326372, 0.870238967260, 0.879342623248, 0.887630917192, 0.894981327227, 0.901356587391,
						0.907285193365, 0.912856265123, 0.917595172338, 0.918922145184, 0.918818251367, 0.918920088871, 0.918943684746, 0.919674534281, 0.920661245730,
						0.921621755491, 0.922582009166, 0.923542024281, 0.924501817154, 0.925461402979, 0.926420795907, 0.927380009116, 0.928339054879, 0.929297944628,
						0.930256689010, 0.931215297944, 0.932173780667, 0.933132145787, 0.934090401321, 0.935048554738, 0.936006612998, 0.936964582584, 0.937922469536,
						0.938880279483, 0.939838017669, 0.940795688979, 0.941753297967, 0.942710848875, 0.943668345656, 0.944625791994, 0.945583191322, 0.946540546837,
						0.947497861522, 0.948455138154, 0.949412379321, 0.950369587435, 0.951326764746, 0.952283913348, 0.953241035193, 0.954198132101, 0.955155205767,
						0.956112257773, 0.957069289591, 0.958026302593  ]
				)
			}
		}));
	this.gammas.push(new LUTGammaLUT(
		'Varicam V709',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array(
				[ 0.03093963,0.03517715,0.03975096,0.04459771,0.0498902,0.05557408,0.06190443,0.06897675,
				  0.07677725,0.08537468,0.09473446,0.10541067,0.11868528,0.13311738,0.1487007,0.16548566,
				  0.1835071,0.20262917,0.22283545,0.24403145,0.26617877,0.28925105,0.31327642,0.33809209,
				  0.3635757,0.3896826,0.41631627,0.44341889,0.47081168,0.49848151,0.52623353,0.55406649,
				  0.58169329,0.60913806,0.63624608,0.66303621,0.68930935,0.71517113,0.73981736,0.76273104,
				  0.78514678,0.80792983,0.82988348,0.85024823,0.86926131,0.88683223,0.90300653,0.91783703,
				  0.93129966,0.94331701,0.95391642,0.96327691,0.97138937,0.97818037,0.98361305,0.98799011,
				  0.99133483,0.9937684,0.9951962,0.99614917,0.99691692,0.9975211,0.99811777,0.99867865,
				  0.9992434 ]
/*
				[ 0.0704087159144412,0.0749508264215621,0.0794617799217457,0.0838732626982114,0.0881097436496700,0.0923072350428986,0.0968725459117816,0.1017817230036446,
				  0.1071977397933189,0.1131605158561053,0.1199746181561136,0.1279564714951100,0.1382298606268642,0.1497419711974320,0.1625809898335268,0.1767665423389763,
				  0.1923097643611671,0.2092816197242860,0.2276642469792305,0.2473159354901496,0.2681923921822879,0.2901870119434045,0.3132785476681936,0.3374798948802260,
				  0.3625307656773711,0.3883786421623266,0.4148573549444766,0.4419200957332817,0.4693392929132202,0.4970315823888719,0.5248468676100355,0.5525785025445056,
				  0.5800871697998300,0.6072378972356606,0.6339995314083975,0.6601914119807955,0.6856712615627407,0.7092617284315107,0.7316872568847730,0.7544506617800427,
				  0.7762530880184800,0.7962884672425837,0.8146970328178510,0.8314393694706220,0.8465944116933442,0.8601602119618826,0.8720394944493698,0.8823028426167111,
				  0.8911356461564750,0.8984703840964808,0.9042049482452085,0.9086445989987296,0.9118898079356863,0.9140557501917589,0.9151841643927341,0.9160498695958156,
				  0.9166686728274339,0.9172670369957161,0.9178298118153824,0.9183922438603406,0.9189835150172793,0.9195603550971945,0.9201371910775960,0.9207140234967608,
				  0.9212908528222833 ]
*/
			)
		}));
	this.gammas.push(new LUTGammaPQ(
		'Dolby PQ (4300%)', {Lmax: 43}));
	this.gammas.push(new LUTGammaITUProp(
		'ITU Proposal (400%)', {m: 0.12314858 }));
	this.gammas.push(new LUTGammaITUProp(
		'ITU Proposal (800%)', {m: 0.083822216783 }));
	this.gammas.push(new LUTGammaBBC283(
		'BBC WHP283 (400%)', {m: 0.139401137752}));
	this.gammas.push(new LUTGammaBBC283(
		'BBC WHP283 (800%)', {m: 0.097401889128}));
	this.gammas.push(new LUTGammaLUT(
		'Cine+709',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array(
				[ 0.0954769032273705,0.0954769032273705,0.0954769032273705,0.0954769032273705,0.0959562285059629,0.0986129722666667,0.1007855288203324,0.1029588361822092,
				  0.1050407417212121,0.1074285380684262,0.1099629372543499,0.1130464363605083,0.1177288390959922,0.1240367851088954,0.1317128550772239,0.1446664451886608,
				  0.1593985946267840,0.1769490133200391,0.1979285524238514,0.2225798091347019,0.2503051930361682,0.2801856689798631,0.3139098335757576,0.3497721297235581,
				  0.3877613456508310,0.4271625989083088,0.4681812744179862,0.5088015816062559,0.5499994622256109,0.5872390699675464,0.6241285479593353,0.6586195764848485,
				  0.6911271021012708,0.7225135523745846,0.7510633629106550,0.7792410185047898,0.8018812229200390,0.8241061586361680,0.8444257556473117,0.8612752989857283,
				  0.8756776019698924,0.8878454024414468,0.8998906007616814,0.9083085358631475,0.9159943303734116,0.9179524270561095,0.9184450504086021,0.9188426483980449,
				  0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,
				  0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,0.9188660801564027,
				  0.9188660801564027 ]
			)
		}));
	this.gammas.push(new LUTGammaLUT(
		'HG8009G40 (HG7)',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array([	0.07239609, 0.07447394, 0.07686249, 0.07949977, 0.08219600, 0.08567028, 0.09029758, 0.09875797, 0.10914082, 0.11877663,
					0.12870269, 0.14062508, 0.15530285, 0.17128969, 0.18975506, 0.20194191, 0.21350458, 0.22559329, 0.23818850, 0.25204391,
					0.26756238, 0.28482752, 0.30274382, 0.32158673, 0.34408764, 0.36756165, 0.39199445, 0.41935688, 0.44837377, 0.47848551,
					0.51075976, 0.54570010, 0.57983824, 0.61447689, 0.65112936, 0.68499113, 0.71891859, 0.75314337, 0.78354278, 0.81326088,
					0.84125913, 0.86479608, 0.88546580, 0.90573055, 0.92384898, 0.93988492, 0.95264785, 0.96376072, 0.97334372, 0.98062241,
					0.98709762, 0.99131747, 0.99548676, 0.99936430, 1.00048119, 1.00201680, 1.00340872, 1.00480101, 1.00619362, 1.00758652,
					1.00897966, 1.01037302, 1.01176656, 1.01316027, 1.01455411])
		}));
	this.gammas.push(new LUTGammaLUT(
		'HG8009G33 (HG8)',
		{
			format: 'cube',
			size: 65,
			min: [0,0,0],
			max: [1,1,1],
			lut: new Float64Array([	0.07239609, 0.07447394, 0.07686249, 0.07949977, 0.08219600, 0.08567028, 0.09029758, 0.09875797, 0.10914082, 0.11883999,
					0.12866695, 0.14029884, 0.15310654, 0.16395771, 0.17159488, 0.17994152, 0.18962627, 0.19913671, 0.20954062, 0.22066463,
					0.23299733, 0.24700070, 0.26155893, 0.27678437, 0.29492812, 0.31421695, 0.33371713, 0.35623191, 0.38106152, 0.40679243,
					0.43514727, 0.46554389, 0.49718732, 0.52924796, 0.56498567, 0.59981238, 0.63527053, 0.67212902, 0.70738288, 0.74196788,
					0.77508835, 0.80634606, 0.83308644, 0.86097158, 0.88602416, 0.90802721, 0.92741313, 0.94399390, 0.95904874, 0.97104303,
					0.98114013, 0.98817840, 0.99432461, 0.99942929, 1.00040913, 1.00201680, 1.00340872, 1.00480101, 1.00619362, 1.00758652,
					1.00897966, 1.01037302, 1.01176656, 1.01316027, 1.01455411])
		}));
	this.gammas.push(new LUTGammaGen(
		'Canon WideDR',
		{
			blk: [ 4.143864904, 0.062733691 ],
			bot: [ 4.143864904, 0.062733691 ],
			low: [ 1.123724397, 0.023399556, 0.725329449, 1.793298155, 1.618753622, 1.512604528, 0.010239171 ],
			mid: [ 1.175009007, -0.889534156, 0.366778059, 1.74451447, 0.920944271, 0.662662566, 0.200816705 ],
			high: [ 1.075984367, 0.080088043, 0.54850957, 1.222465712, 1.162090342, 1.216780039, 1.001012923 ],
			top: [ 1.184590585, 0.32981997, 0.381916345, 1.047595142, 1.356034214, 1.40672617, 3.213458281 ]
		}));
	this.LA = this.gammas.length;
	this.gammas.push(new LUTGammaLA(
		'LA'));
	this.gammas.push(new LUTGammaNull(
		'Null'));
	var max = this.gammas.length;
	var logList = [], linList = [], genList = [], hdrList = [], ioList = [];
	for (var i=0; i < max; i++) {
		this.catList[i] = this.gammas[i].cat;
		switch(this.gammas[i].cat) {
			case 0: logList.push({name: this.gammas[i].name, idx: i});
					break;
			case 1: this.linList.push({name: this.gammas[i].name + ' - ' + this.gammas[i].gamma, idx: i});
					break;
			case 2: genList.push({name: this.gammas[i].name, idx: i});
					break;
			case 5: hdrList.push({name: this.gammas[i].name, idx: i});
					break;
			case 6: ioList.push({name: this.gammas[i].name, idx: i});
					break;
			default: break;
		}
	}
	this.inList = logList.slice();
	this.inList.push({name: 'Linear / Rec709', idx: 9999});
	this.inList = this.inList.concat(hdrList);
	this.inList = this.inList.concat(ioList);
	this.outList = logList.slice();
	this.outList.push({name: 'Linear / Rec709', idx: 9999});
	this.outList = this.outList.concat(genList);
	this.outList = this.outList.concat(hdrList);
	this.outList = this.outList.concat(ioList);
	this.outList.push({name: this.gammas[max-1].name, idx: (max-1)});
};
// Parameter setting functions
LUTGamma.prototype.setASCCDL = function(params) {
	var out = {};
	this.doASCCDL = false;
	this.changedASCCDL = false;
	if (this.tweaks && typeof params.twkASCCDL !== 'undefined') {
		var p = params.twkASCCDL;
		if (typeof p.doASCCDL === 'boolean') {
			var didASCCDL = this.doASCCDL;
			this.doASCCDL = p.doASCCDL;	
			if (didASCCDL && !this.doASCCDL) {
				this.changedASCCDL = true;
			}
		}
		if (typeof p.cdl !== 'undefined') {
			var newCDL = new Float64Array(p.cdl);
			for (var j=0; j<10; j++) {
				if (newCDL[j] !== this.asc[j]) {
					this.asc = newCDL;
					if (j < 9) {
						this.changedASCCDL = true;
					}
					break;
				}
			}
		}
	}
	out.doASCCDL = this.doASCCDL;
	return out;
};
LUTGamma.prototype.setBlkHi = function(params) {
	var out = {};
	this.al = 1;
	this.bl = 0;
	this.ad = 1;
	this.bd = 0;
	this.doBlkHi = false;
	if (this.tweaks && typeof params.twkBlkHi !== 'undefined') {
		var p = params.twkBlkHi;
		var changedRef = false;
		if (typeof p.highRef === 'number') {
			if (this.highRef !== p.highRef) {
				changedRef = true;
			}
			this.highRef = p.highRef;
		} else {
			this.highRef = 0.9;
		}
		var blackDefault;
		var highDefault;
		if (this.doASCCDL) {
			blackDefault = this.gammas[this.curOut].linToLegal(this.cdlLum(0));
			highDefault = this.gammas[this.curOut].linToLegal(this.cdlLum(this.highRef/0.9));
		} else {
			blackDefault = this.gammas[this.curOut].linToLegal(0);
			highDefault = this.gammas[this.curOut].linToLegal(this.highRef/0.9);
		}
		var blackLock = false;
		if (typeof p.blackLock === 'boolean') {
			blackLock = p.blackLock;
		}
		var highLock = false;
		if (typeof p.highLock === 'boolean') {
			highLock = p.highLock;
		}
		var blackMap;
		if (typeof p.blackLevel === 'number') {
			if (blackLock || (Math.abs(blackDefault-p.blackLevel)>0.0001 && !this.changedOut && !this.changedASCCDL)) {
				blackMap = p.blackLevel;
			} else {
				blackMap = blackDefault;
			}
		} else {
			blackMap = blackDefault;
		}
		var highMap;
		if (typeof p.highMap === 'number') {
			if (highLock || (Math.abs(highDefault-p.highMap)>0.0001 && !this.changedOut && !changedRef && !this.changedASCCDL)) {
				highMap = p.highMap;
			} else {
				highMap = highDefault;
			}
		} else {
			highMap = highDefault;
		}
		out.blackDef = blackDefault;
		out.blackLevel = blackMap;
		out.highRef = this.highRef;
		out.highDef = highDefault;
		out.high709 = this.gammas[this.rec709].linToLegal(this.highRef/0.9);
		out.highMap = highMap;
		out.hmmm=p;
		if (typeof p.doBlkHi === 'boolean' && p.doBlkHi) {
			if (!p.doBlack) {
				blackMap = blackDefault;
			}
			if (!p.doHigh) {
				highMap = highDefault;
			}
			if (!this.nul && (p.doBlack || p.doHigh)) {
				this.al = (highMap - blackMap)/(highDefault - blackDefault);
				this.bl = blackMap - (blackDefault * this.al);
				this.ad = this.al;
				this.bd = ((876*(blackMap - (this.al*blackDefault))) + (64*(1- this.al)))/1023;
				this.doBlkHi = true;
			}
		}
	} else {
		var blackDefault;
		var highDefault;
		if (this.doASCCDL) {
			blackDefault = this.gammas[this.curOut].linToLegal(this.cdlLum(0));
			highDefault = this.gammas[this.curOut].linToLegal(this.cdlLum(this.highRef/0.9));
		} else {
			blackDefault = this.gammas[this.curOut].linToLegal(0);
			highDefault = this.gammas[this.curOut].linToLegal(this.highRef/0.9);
		}
		out.blackDef = blackDefault;
		out.blackLevel = blackDefault;
		out.highRef = 0.9;
		out.highDef = highDefault;
		out.high709 = this.gammas[this.rec709].linToLegal(this.highRef/0.9);
		out.highMap = highDefault;
	}
	if (this.gammas[this.curOut].cat === 3){
		this.doBlkHi = false;
	}
	out.doBlkHi = this.doBlkHi;
	return out;
};
// Adjustment functions
LUTGamma.prototype.ASCCDL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	var r,g,b;
	for (var j=0; j<m; j++) {
		r = (c[j]*this.asc[0])+this.asc[3];
		r = 0.2126*((r<0)?r:Math.pow(r,this.asc[6]));
		g = (c[j]*this.asc[1])+this.asc[4];
		g = 0.7152*((g<0)?g:Math.pow(g,this.asc[7]));
		b = (c[j]*this.asc[2])+this.asc[5];
		b = 0.0722*((b<0)?b:Math.pow(b,this.asc[8]));
		c[j] = ((isNaN(r)?0:r)+(isNaN(g)?0:g)+(isNaN(b)?0:b));
	}
};
LUTGamma.prototype.cdlLum = function(l) {
	var r = (l*this.asc[0])+this.asc[3];
	r = 0.2126*((r<0)?r:Math.pow(r,this.asc[6]));
	var g = (l*this.asc[1])+this.asc[4];
	g = 0.7152*((g<0)?g:Math.pow(g,this.asc[7]));
	var b = (l*this.asc[2])+this.asc[5];
	b = 0.0722*((b<0)?b:Math.pow(b,this.asc[8]));
	return ((isNaN(r)?0:r)+(isNaN(g)?0:g)+(isNaN(b)?0:b));
};
// Transfer function calculation objects
function LUTGammaLog(name,params) {
	this.name = name;
	this.params = params;
	this.iso = 800;
	this.cat = 0;
}
LUTGammaLog.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaLog.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= this.params[8]) {
			c[j] = (this.params[2] * Math.log((c[j] * this.params[3]) + this.params[6])/Math.log(this.params[4])) + this.params[5];
		} else if (this.params[0] === 0) {
			c[j] = (this.params[2] * Math.log((0.000000000000001 * this.params[3]) + this.params[6])/Math.log(this.params[4])) + this.params[5];
		} else {
			c[j] = (c[j] - this.params[1])/this.params[0];
		}
	}
};
LUTGammaLog.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaLog.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= this.params[7]) {
			c[j] = (Math.pow(this.params[4],(c[j] - this.params[5])/this.params[2]) - this.params[6])/this.params[3];		
		} else {
			c[j] = (this.params[0]*c[j]) + this.params[1];
		}
	}
};
LUTGammaLog.prototype.linFromL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
	this.linFromD(buff);
};
LUTGammaLog.prototype.linToData = function(input) {
	if (input >= this.params[8]) {
		return (this.params[2] * Math.log((input * this.params[3]) + this.params[6])/Math.log(this.params[4])) + this.params[5];
	} else if (this.params[0] === 0) {
		return (this.params[2] * Math.log((0.000000000000001 * this.params[3]) + this.params[6])/Math.log(this.params[4])) + this.params[5];
	} else {
		return (input - this.params[1])/this.params[0];
	}
};
LUTGammaLog.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
LUTGammaLog.prototype.linFromData = function(input) {
	if (input >= this.params[7]) {
		return (Math.pow(this.params[4],(input - this.params[5])/this.params[2]) - this.params[6])/this.params[3];		
	} else {
		return (this.params[0]*input) + this.params[1];
	}
};
LUTGammaLog.prototype.linFromLegal = function(input) {
	return this.linFromData((input * 0.85630498533724) + 0.06256109481916);
};
function LUTGammaArri(name,sup) {
	this.name = name;
	this.sup = sup;
	this.iso = 800;
	this.hiCut = false;
	this.cat = 0;
	this.hiMult = 1;
	if (this.sup == 2) {
		this.cut = 0;
		this.a = 5.061087;
		this.b = 0.089004;
		this.c = 0.2471894558;
		this.d = 0.391007;
		this.e = 4.9488401422;
		this.f = 0.1313126129;
	} else {
		this.cut = 0.0105942872;
		this.a = 5.555556;
		this.b = 0.0522539438;
		this.c = 0.2471896946;
		this.d = 0.3855374431;
		this.e = 5.3676547147;
		this.f = 0.0928092678;
	}
}
LUTGammaArri.prototype.changeISO = function(iso) {
	this.iso = iso;
	if (iso > 1507) {
		this.hiCut = true;
	} else {
		this.hiCut = false;
	}
	var shift = Math.log(this.iso/800)/Math.LN2;
	this.hiMult = (65.791419 * shift) - 60.098922;
	if (this.sup == 2) {
		this.cut = 0;
		this.a = 5.061087;
		this.b = 0.089004;
		this.c = ( 0.0000000493*(shift^2)) + (-0.0094084706*shift) + 0.2471894558;
		this.d = 0.391007;
		this.e = (-0.0856489563*(shift^2)) + (-0.7929175529*shift) + 4.9488401422;
		this.f = (-0.0000000793*(shift^2)) + ( 0.0098846077*shift) + 0.1313126129;
	} else {
		this.cut = (0.0000850381*(shift^2)) + (0.0023634140*shift) + 0.0105942872;
		this.a = 5.555556;
		this.b = (-0.0004732561*(shift^2)) + (-0.0131317314*shift) + 0.0522539438;
		this.c = ( 0.0000000472*(shift^2)) + (-0.0094085263*shift) + 0.2471896946;
		this.d = ( 0.0000084236*(shift^2)) + ( 0.0015466913*shift) + 0.3855374431;
		this.e = ( 0.0000001125*(shift^2)) + (-0.2043050951*shift) + 5.3676547147;
		this.f = ( 0.0000003478*(shift^2)) + ( 0.0000143250*shift) + 0.0928092678;
	}
};
LUTGammaArri.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	var o;
	for (var j=0; j<m; j++) {
		c[j] = c[j] * 0.9;
		o = c[j];
		if (c[j] > this.cut) {
			c[j] = ((this.c * Math.log((this.a * c[j]) + this.b)/Math.LN10) + this.d);
		} else {
			c[j] = ((this.e * c[j]) + this.f);
		}
		if (this.hiCut && c[j] > 0.844933) {
			c[j] = o / ((Math.log((c[j] + 8.623709243) * 0.105612045) * this.hiMult / Math.LN10) + 1);
			if (c[j] > this.cut) {
				c[j] = ((this.c * Math.log((this.a * c[j]) + this.b)/Math.LN10) + this.d);
			} else {
				c[j] = ((this.e * c[j]) + this.f);
			}
		}
	}
};
LUTGammaArri.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaArri.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	var o;
	for (var j=0; j<m; j++) {
		o = c[j];
		if (c[j] > ((this.e * this.cut) + this.f)) {
			c[j] = (Math.pow(10, (c[j] - this.d) / this.c) - this.b)/(this.a*0.9);
		} else {
			c[j] = ((c[j] - this.f) / (this.e*0.9));
		}
		if (this.hiCut && o > 0.844933) {
			c[j] = c[j] * ((Math.log((o + 8.623709243) * 0.105612045) * this.hiMult / Math.LN10) + 1);
		}
	}
};
LUTGammaArri.prototype.linFromL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
	this.linFromD(buff);
};
LUTGammaArri.prototype.linToData = function(input) {
	var out;
	input = input * 0.9;
	if (input > this.cut) {
		out = ((this.c * Math.log((this.a * input) + this.b)/Math.LN10) + this.d);
	} else {
		out = ((this.e * input) + this.f);
	}
	if (this.hiCut && out > 0.844933) {
		input = input / ((Math.log((out + 8.623709243) * 0.105612045) * this.hiMult / Math.LN10) + 1);
		if (input > this.cut) {
			out = ((this.c * Math.log((this.a * input) + this.b)/Math.LN10) + this.d);
		} else {
			out = ((this.e * input) + this.f);
		}
	}
	return out;
};
LUTGammaArri.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
LUTGammaArri.prototype.linFromData = function(input) {
	var out;
	if (input > ((this.e * this.cut) + this.f)) {
		out = (Math.pow(10, (input - this.d) / this.c) - this.b)/(this.a*0.9);
	} else {
		out = ((input - this.f) / (this.e*0.9));
	}
	if (this.hiCut && input > 0.844933) {
		out = out * ((Math.log((input + 8.623709243) * 0.105612045) * this.hiMult / Math.LN10) + 1);
	}
	return out;
};
LUTGammaArri.prototype.linFromLegal = function(input) {
	return this.linFromData((input * 0.85630498533724) + 0.06256109481916);
};
function LUTGammaGam(name,params) {
	this.name = name;
	this.params = params;
	this.gamma = params[0].toFixed(2).toString();
	this.iso = 800;
	this.cat = 1;
}
LUTGammaGam.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaGam.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToL(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaGam.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= this.params[3]) {
			c[j] = ((1 + this.params[2]) * Math.pow(c[j],1 / this.params[0])) - this.params[2];
		} else {
			c[j] = this.params[1] * c[j];
		}
	}
};
LUTGammaGam.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
	this.linFromL(buff);
};
LUTGammaGam.prototype.linFromL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= this.params[4]) {
			c[j] = Math.pow((c[j] + this.params[2])/(1 + this.params[2]),this.params[0]);		
		} else {
			c[j] = (c[j] / this.params[1]);
		}
	}
};
LUTGammaGam.prototype.linToData = function(input) {
	return (this.linToLegal(input) * 0.85630498533724) + 0.06256109481916;
};
LUTGammaGam.prototype.linToLegal = function(input) {
	if (input >= this.params[3]) {
		return ((1 + this.params[2]) * Math.pow(input,1 / this.params[0])) - this.params[2];
	} else {
		return this.params[1] * input;
	}
};
LUTGammaGam.prototype.linFromData = function(input) {
	return this.linFromLegal((input - 0.06256109481916) / 0.85630498533724);
};
LUTGammaGam.prototype.linFromLegal = function(input) {
	if (input >= this.params[4]) {
		return Math.pow((input + this.params[2])/(1 + this.params[2]),this.params[0]);		
	} else {
		return (input / this.params[1]);
	}
};
function LUTGammaLin(name, zero) {
	this.name = name;
	this.iso = 800;
	this.zero = zero / 0.2;
	this.gamma = 1;
	this.cat = 1;
}
LUTGammaLin.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaLin.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * this.zero * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaLin.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = c[j] * this.zero;
	}
};
LUTGammaLin.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / (0.85630498533724 * this.zero);
	}
};
LUTGammaLin.prototype.linFromL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = c[j] / this.zero;
	}
};
LUTGammaLin.prototype.linToData = function(input) {
	return (input * this.zero * 0.85630498533724) + 0.06256109481916;
};
LUTGammaLin.prototype.linToLegal = function(input) {
	return input * this.zero;
};
LUTGammaLin.prototype.linFromData = function(input) {
	return (input - 0.06256109481916) / (0.85630498533724 * this.zero);
};
LUTGammaLin.prototype.linFromLegal = function(input) {
	return input / this.zero;
};
function LUTGammaPQ(name,params) {
	this.name = name;
	this.params = params.nits;
	this.cat = 5;
	this.Lmax = params.Lmax;
	this.n = (2610/4096)*(1/4);
	this.m = (2523/4096)*128;
	this.c1 = (3424/4096);
	this.c2 = (2413/4096)*32;
	this.c3 = (2392/4096)*32;
	this.changeISO(800);
}
LUTGammaPQ.prototype.changeISO = function(iso) {
	this.iso = iso;
	this.L = this.Lmax;
	this.e = this.linToLegal(0);
};
LUTGammaPQ.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToL(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaPQ.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	var r;
	for (var j=0; j<m; j++) {
		if (c[j] < 0) {
			c[j] = this.e;
		} else {
			r = Math.pow(c[j]/this.L,this.n);
			c[j] = Math.pow((this.c1+(this.c2*r))/(1+(this.c3*r)),this.m);
		}
	}
};
LUTGammaPQ.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
	this.linFromL(buff);
};
LUTGammaPQ.prototype.linFromL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	var r;
	for (var j=0; j<m; j++) {
		if (input <= this.e) {
			c[j] = 0;
		} else {
			r = Math.pow(c[j],1/this.m);
			c[j] = this.L*Math.pow((r-this.c1)/(this.c2-(this.c3*r)),1/this.n);
		}
	}
};
LUTGammaPQ.prototype.linToData = function(input) {
	return (this.linToLegal(input) * 0.85630498533724) + 0.06256109481916;
};
LUTGammaPQ.prototype.linToLegal = function(input) {
	if (input < 0) {
		return this.e;
	} else {
		var r = Math.pow(input/this.L,this.n);
		return Math.pow((this.c1+(this.c2*r))/(1+(this.c3*r)),this.m);
	}
};
LUTGammaPQ.prototype.linFromData = function(input) {
	return this.linFromLegal((input - 0.06256109481916) / 0.85630498533724);
};
LUTGammaPQ.prototype.linFromLegal = function(input) {
	if (input <= this.e) {
		return 0;
	} else {
		var r = Math.pow(input,1/this.m);
		return this.L*Math.pow((r-this.c1)/(this.c2-(this.c3*r)),1/this.n);
	}
};
function LUTGammaITUProp(name,params) {
	this.name = name;
	this.iso = 800;
	this.cat = 5;
	this.setM(params.m);
}
LUTGammaITUProp.prototype.setM = function(m) {
	this.m = m;
	this.n = 0.45*1.09930000*Math.pow(m,0.45);
	this.r = (1.09930000*Math.pow(m,0.45)*(1-(0.45*Math.log(m)))) - 0.09930000;
	this.e = this.linToLegal(m);
};
LUTGammaITUProp.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaITUProp.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToL(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaITUProp.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] > this.m) {
			c[j] = ((this.n*Math.log(c[j])) + this.r);
		} else if (c[j] >= 0.01810000) {
			c[j] = (1.09930000 * Math.pow(c[j],0.45)) - 0.09930000;
		} else {
			c[j] = 4.5 * c[j];
		}
	}
};
LUTGammaITUProp.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
	this.linFromL(buff);
};
LUTGammaITUProp.prototype.linFromL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] > this.e) {
			c[j] = Math.exp((c[j]-this.r)/this.n);
		} else if (c[j] >= 0.08145000) {
			c[j] = Math.pow((c[j] + 0.09930000)/(1.09930000),1/0.45);		
		} else {
			c[j] = (c[j] / 4.5);
		}
	}
};
LUTGammaITUProp.prototype.linToData = function(input) {
	return (this.linToLegal(input) * 0.85630498533724) + 0.06256109481916;
};
LUTGammaITUProp.prototype.linToLegal = function(input) {
	if (input > this.m) {
		return ((this.n*Math.log(input)) + this.r);
	} else if (input >= 0.01810000) {
		return (1.09930000 * Math.pow(input,0.45)) - 0.09930000;
	} else {
		return 4.5 * input;
	}
};
LUTGammaITUProp.prototype.linFromData = function(input) {
	return this.linFromLegal((input - 0.06256109481916) / 0.85630498533724);
};
LUTGammaITUProp.prototype.linFromLegal = function(input) {
	if (input > this.e) {
		return Math.exp((input-this.r)/this.n);
	} else if (input >= 0.08145000) {
		return Math.pow((input + 0.09930000)/(1.09930000),1/0.45);		
	} else {
		return (input / 4.5);
	}
};
function LUTGammaBBC283(name,params) {
	this.name = name;
	this.iso = 800;
	this.cat = 5;
	this.setM(params.m);
	this.setS(1);
}
LUTGammaBBC283.prototype.setM = function(m) {
	this.m = m;
	this.n = Math.sqrt(m)/2;
	this.r = Math.sqrt(m)*(1-Math.log(Math.sqrt(m)));
	this.e = this.linToLegal(m);
};
LUTGammaBBC283.prototype.setS = function(s) { // System Gamma
	this.s = s;
};
LUTGammaBBC283.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaBBC283.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToL(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaBBC283.prototype.linToL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] > this.m) {
			c[j] = ((this.n*Math.log(c[j])) + this.r);
		} else if (c[j]>0) {
			c[j] = Math.sqrt(c[j]);
		} else {
			c[j] = 0;
		}
	}
};
LUTGammaBBC283.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
	this.linFromL(buff);
};
LUTGammaBBC283.prototype.linFromL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >this.e) {
			c[j] = Math.exp(this.s*(c[j]-this.r)/this.n);
		} else {
			c[j] = Math.pow(c[j],2*this.s);
		}
	}
};
LUTGammaBBC283.prototype.linToData = function(input) {
	return (this.linToLegal(input) * 0.85630498533724) + 0.06256109481916;
};
LUTGammaBBC283.prototype.linToLegal = function(input) {
	if (input > this.m) {
		return ((this.n*Math.log(input)) + this.r);
	} else if (input>0) {
		return Math.sqrt(input);
	} else {
		return 0;
	}
};
LUTGammaBBC283.prototype.linFromData = function(input) {
	return this.linFromLegal((input - 0.06256109481916) / 0.85630498533724);
};
LUTGammaBBC283.prototype.linFromLegal = function(input) {
	if (input >this.e) {
		return Math.exp(this.s*(input-this.r)/this.n);
	} else {
		return Math.pow(input,2*this.s);
	}
};
function LUTGammaACEScc(name,params) {
	this.name = name;
	this.iso = 800;
	this.cat = 0;
	this.low = Math.pow(2,-15);
	this.m = ((Math.log(this.low*0.5)/Math.log(2)) + 9.72)/17.52;
	this.low2 = (9.72-15)/17.52;
	this.mid = ((Math.log(65504)/Math.log(2))+9.72)/17.52;
}
LUTGammaACEScc.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaACEScc.prototype.linToL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] < 0) {
			c[j] = this.m;
		} else if (c[j]<(this.low/0.9)) {
			c[j] = ((Math.log(Math.pow(2,-16) + (c[j]*0.45))/Math.log(2)) + 9.72)/17.52;
		} else {
			c[j] = ((Math.log(c[j]*0.9)/Math.log(2))+9.72)/17.52;
		}
	}
};
LUTGammaACEScc.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToL(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaACEScc.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
	this.linFromL(buff);
};
LUTGammaACEScc.prototype.linFromL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] < this.low2) {
			c[j] = (Math.exp(2,(c[j]*17.52)-9.72)-Math.pow(2,-16))*2/0.9;
		} else if (c[j] < this.mid) {
			c[j] = Math.exp(2,(c[j]*17.52)-9.72)/0.9;
		} else {
			c[j] = 65504/0.9;
		}
	}
};
LUTGammaACEScc.prototype.linToData = function(input) {
	return (this.linToLegal(input) * 0.85630498533724) + 0.06256109481916;
};
LUTGammaACEScc.prototype.linToLegal = function(input) {
		if (input < 0) {
			return this.m;
		} else if (input<(this.low/0.9)) {
			return ((Math.log(Math.pow(2,-16) + (input*0.45))/Math.log(2)) + 9.72)/17.52;
		} else {
			return ((Math.log(input*0.9)/Math.log(2))+9.72)/17.52;
		}
};
LUTGammaACEScc.prototype.linFromData = function(input) {
	return this.linFromLegal((input - 0.06256109481916) / 0.85630498533724);
};
LUTGammaACEScc.prototype.linFromLegal = function(input) {
	if (input < this.low2) {
		return (Math.exp(2,(input*17.52)-9.72)-Math.pow(2,-16))*2/0.9;
	} else if (input < this.mid) {
		return Math.exp(2,(input*17.52)-9.72)/0.9;
	} else {
		return 65504/0.9;
	}
};
function LUTGammaACESProxy(name,params) {
	this.name = name;
	this.iso = 800;
	this.cat = 0;
	if (params === 10) {
		this.blk = 64;
		this.mul = 50;
		this.off = 425;
		this.hi = 1023;
	} else {
		this.blk = 256;
		this.mul = 200;
		this.off = 1700;
		this.hi = 4095;
	}
	this.low = Math.pow(2,-9.72)/0.9;
}
LUTGammaACESProxy.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaACESProxy.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] <= this.low) {
			c[j] = this.blk / this.hi;
		} else {
			c[j] = ((((Math.log(c[j]*0.9)/Math.log(2))+2.5) * this.mul) + this.off)/this.hi;
		}
	}
};
LUTGammaACESProxy.prototype.linToL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaACESProxy.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = Math.pow(2,(((c[j]*this.hi)-this.off)/this.mul)-2.5)/0.9;
	}
};
LUTGammaACESProxy.prototype.linFromL = function(buff) {
	var c= new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j]*0.85630498533724) + 0.06256109481916;
	}
	this.linFromD(buff);
};
LUTGammaACESProxy.prototype.linToData = function(input) {
	if (input <= this.low) {
		return this.blk / this.hi;
	} else {
		return ((((Math.log(input*0.9)/Math.log(2))+2.5) * this.mul) + this.off) / this.hi;
	}
};
LUTGammaACESProxy.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
LUTGammaACESProxy.prototype.linFromData = function(input) {
	return Math.pow(2,(((input*this.hi)-this.off)/this.mul)-2.5)/0.9;
};
LUTGammaACESProxy.prototype.linFromLegal = function(input) {
	return (this.linFromData(input)*0.85630498533724) + 0.06256109481916;
};
function LUTGammaGen(name,params) {
	this.name = name;
	this.params = params;
	this.iso = 800;
	this.cat = 2;
}
LUTGammaGen.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaGen.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	var stop;
	for (var j=0; j<m; j++) {
		stop = -300;
		if (c[j] > 0) {
			stop = Math.log(c[j] / 0.2) / Math.LN2;
		}
		if ( c[j] > this.params.top[6] ) {
			c[j] = this.params.top[1] + ((this.params.top[0] - this.params.top[1])/Math.pow(1+(this.params.top[4] * Math.exp(-this.params.top[2]*(stop - this.params.top[5]))),1/this.params.top[3]));
		} else if ( c[j] > this.params.high[6] ) {
			c[j] = this.params.high[1] + ((this.params.high[0] - this.params.high[1])/Math.pow(1+(this.params.high[4] * Math.exp(-this.params.high[2]*(stop - this.params.high[5]))),1/this.params.high[3]));
		} else if ( c[j] > this.params.mid[6] ) {
			c[j] = this.params.mid[1] + ((this.params.mid[0] - this.params.mid[1])/Math.pow(1+(this.params.mid[4] * Math.exp(-this.params.mid[2]*(stop - this.params.mid[5]))),1/this.params.mid[3]));
		} else if ( c[j] > this.params.low[6] ) {
			c[j] = this.params.low[1] + ((this.params.low[0] - this.params.low[1])/Math.pow(1+(this.params.low[4] * Math.exp(-this.params.low[2]*(stop - this.params.low[5]))),1/this.params.low[3]));
		} else if ( c[j] <=0 ) {
			c[j] = (this.params.blk[0] * c[j]) + this.params.blk[1];
		} else {
			c[j] = (this.params.bot[0] * c[j]) + this.params.bot[1];
		}
	}
};
LUTGammaGen.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaGen.prototype.linToData = function(input) {
	var stop = -300;
	if (input > 0) {
		stop = Math.log(input / 0.2) / Math.LN2;
	}
	if ( input > this.params.top[6] ) {
		return this.params.top[1] + ((this.params.top[0] - this.params.top[1])/Math.pow(1+(this.params.top[4] * Math.exp(-this.params.top[2]*(stop - this.params.top[5]))),1/this.params.top[3]));
	} else if ( input > this.params.high[6] ) {
		return this.params.high[1] + ((this.params.high[0] - this.params.high[1])/Math.pow(1+(this.params.high[4] * Math.exp(-this.params.high[2]*(stop - this.params.high[5]))),1/this.params.high[3]));
	} else if ( input > this.params.mid[6] ) {
		return this.params.mid[1] + ((this.params.mid[0] - this.params.mid[1])/Math.pow(1+(this.params.mid[4] * Math.exp(-this.params.mid[2]*(stop - this.params.mid[5]))),1/this.params.mid[3]));
	} else if ( input > this.params.low[6] ) {
		return this.params.low[1] + ((this.params.low[0] - this.params.low[1])/Math.pow(1+(this.params.low[4] * Math.exp(-this.params.low[2]*(stop - this.params.low[5]))),1/this.params.low[3]));
	} else if ( input <=0 ) {
		return (this.params.blk[0] * input) + this.params.blk[1];
	} else {
		return (this.params.bot[0] * input) + this.params.bot[1];
	}
};
LUTGammaGen.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
function LUTGammaLUT(name,params) {
	this.name = name;
	this.lut = new LUTs();
	this.lut.setDetails({
		title: name,
		format: params.format,
		dims: 1,
		s: params.size,
		min: params.min,
		max: params.max,
		C: [params.lut.buffer]
	});
	this.iso = 800;
	this.cat = 2;
}
LUTGammaLUT.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaLUT.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= 0.0125) {
			c[j] = (0.2556207230 * Math.log((c[j] * 4.7368421060) + 0.0526315790)/Math.LN10) + 0.4105571850;
		} else {
			c[j] = (c[j] + 0.0155818840)/0.1677922920;
		}
	}
	this.lut.lLsCub(buff);
};
LUTGammaLUT.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaLUT.prototype.linToData = function(input) {
	if (input >= 0.0125) {
		return this.lut.lLCub((0.2556207230 * Math.log((input * 4.7368421060) + 0.0526315790)/Math.LN10) + 0.4105571850);
	} else {
		return this.lut.lLCub((input + 0.0155818840)/0.1677922920);
	}
};
LUTGammaLUT.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
function LUTGammaIOLUT(name,params) {
	this.name = name;
	this.rec = new LUTs();
	this.out = new LUTs();
	this.rec.setDetails({
		title: name,
		format: params.rec.format,
		dims: 1,
		s: params.rec.size,
		min: params.rec.min,
		max: params.rec.max,
		C: [params.rec.lut.buffer]
	});
	this.out.setDetails({
		title: name,
		format: params.out.format,
		dims: 1,
		s: params.out.size,
		min: params.out.min,
		max: params.out.max,
		C: [params.out.lut.buffer]
	});
	this.iso = 800;
	this.cat = 6;
}
LUTGammaIOLUT.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaIOLUT.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= 0.0125) {
			c[j] = (0.2556207230 * Math.log((c[j] * 4.7368421060) + 0.0526315790)/Math.LN10) + 0.4105571850;
		} else {
			c[j] = (c[j] + 0.0155818840)/0.1677922920;
		}
	}
	this.out.lLsCub(buff);
};
LUTGammaIOLUT.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaIOLUT.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.rec.lLsCub(buff);
	for (var j=0; j<m; j++) {
		if (c[j] >= 0.1673609920) {
			c[j] = (Math.pow(10,(c[j] - 0.4105571850)/0.2556207230) - 0.0526315790)/4.7368421060;		
		} else {
			c[j] = (0.1677922920 * c[j]) - 0.0155818840;
		}
	}
};
LUTGammaIOLUT.prototype.linFromL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
	this.linFromD(buff);
};
LUTGammaIOLUT.prototype.linToData = function(input) {
	if (input >= 0.0125) {
		return this.out.lLCub((0.2556207230 * Math.log((input * 4.7368421060) + 0.0526315790)/Math.LN10) + 0.4105571850);
	} else {
		return this.out.lLCub((input + 0.0155818840)/0.1677922920);
	}
};
LUTGammaIOLUT.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
LUTGammaIOLUT.prototype.linFromData = function(input) {
	var data = this.rec.lLCub(input);
	if (data >= 0.1673609920) {
		return (Math.pow(10,(data - 0.4105571850)/0.2556207230) - 0.0526315790)/4.7368421060;		
	} else {
		return (0.1677922920 * data) - 0.0155818840;
	}
};
LUTGammaIOLUT.prototype.linFromLegal = function(input) {
	return this.linFromData((input * 0.85630498533724) + 0.06256109481916);
};
function LUTGammaLA(name) {
	this.name = name;
	this.iso = 800;
	this.cat = 4;
}
LUTGammaLA.prototype.setLUT = function(lut) {
	this.lut = new LUTs();
	this.lut.setDetails({
		title: lut.title,
		format: lut.format,
		dims: lut.dims,
		s: lut.s,
		min: [lut.min[0],lut.min[1],lut.min[2]],
		max: [lut.max[0],lut.max[1],lut.max[2]],
		rgbl: lut.rgbl,
		C: lut.C
	});
	this.rev = new LUTs();
	this.rev.setDetails({
		title: lut.title,
		format: lut.format,
		dims: lut.dims,
		s: lut.s,
		min: [lut.min[0],lut.min[1],lut.min[2]],
		max: [lut.max[0],lut.max[1],lut.max[2]],
		rgbl: lut.rgbl,
		C: lut.R
	});
};
LUTGammaLA.prototype.setTitle = function(name) {
	this.name = name;
};
LUTGammaLA.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaLA.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		if (c[j] >= 0.0125) {
			c[j] = (0.2556207230 * Math.log((c[j] * 4.7368421060) + 0.0526315790)/Math.LN10) + 0.4105571850;
		} else {
			c[j] = (c[j] + 0.0155818840)/0.1677922920;
		}
	}
	this.lut.lLsCub(buff);
};
LUTGammaLA.prototype.linToL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	this.linToD(buff);
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaLA.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = this.rev.lLCub(c[j]);
		if (c[j] >= 0.1673609920) {
			c[j] = (Math.pow(10,(c[j] - 0.4105571850)/0.2556207230) - 0.0526315790)/4.7368421060;		
		} else {
			c[j] = (0.1677922920*c[j]) + -0.0155818840;
		}
	}
};
LUTGammaLA.prototype.linFromL = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (input * 0.85630498533724) + 0.06256109481916;
	}
	this.linFromD(buff);
};
LUTGammaLA.prototype.linToData = function(input) {
	if (input >= 0.0125) {
		return this.lut.lLCub((0.2556207230 * Math.log((input * 4.7368421060) + 0.0526315790)/Math.LN10) + 0.4105571850);
	} else {
		return this.lut.lLCub((input + 0.0155818840)/0.1677922920);
	}
};
LUTGammaLA.prototype.linToLegal = function(input) {
	return (this.linToData(input) - 0.06256109481916) / 0.85630498533724;
};
LUTGammaLA.prototype.linFromData = function(input) {
 	input = this.rev.lLCub(input);
	if (input >= 0.1673609920) {
		return (Math.pow(10,(input - 0.4105571850)/0.2556207230) - 0.0526315790)/4.7368421060;		
	} else {
		return (0.1677922920*input) + -0.0155818840;
	}
};
LUTGammaLA.prototype.linFromLegal = function(input) {
	return this.linFromData((input * 0.85630498533724) + 0.06256109481916);
};
function LUTGammaNull(name) {
	this.name = name;
	this.iso = 800;
	this.cat = 3;
}
LUTGammaNull.prototype.changeISO = function(iso) {
	this.iso = iso;
};
LUTGammaNull.prototype.linToD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] * 0.85630498533724) + 0.06256109481916;
	}
};
LUTGammaNull.prototype.linToL = function(buff) {
// Do Nothing (null)!
};
LUTGammaNull.prototype.linFromD = function(buff) {
	var c = new Float64Array(buff);
	var m = c.length;
	for (var j=0; j<m; j++) {
		c[j] = (c[j] - 0.06256109481916) / 0.85630498533724;
	}
};
LUTGammaNull.prototype.linFromL = function(buff) {
// Do nothing (null)!
};
LUTGammaNull.prototype.linToData = function(input) {
	return (input * 0.85630498533724) + 0.06256109481916;
};
LUTGammaNull.prototype.linToLegal = function(input) {
	return input;
};
LUTGammaNull.prototype.linFromData = function(input) {
	return (input - 0.06256109481916) / 0.85630498533724;
};
LUTGammaNull.prototype.linFromLegal = function(input) {
	return input;
};
// I/O functions
LUTGamma.prototype.setParams = function(params) {
	var out = {	t: 20, v: this.ver , changedGamma: false};
	if (typeof params.v !== 'number') {
		out.err = true;
		out.details = 'Missing version no.';
		return out;
	}
	if (typeof params.inGamma === 'number') {
		if (params.inGamma !== 9999) {
			if (params.inGamma !== this.curIn) {
				out.changedGamma = true;
			}
			this.curIn = params.inGamma;
			out.inGamma = this.curIn;
		} else {
			if (typeof params.inLinGamma === 'number') {
				if (params.inLinGamma !== this.curIn) {
					out.changedGamma = true;
				}
				this.curIn = params.inLinGamma;
				out.inLinGamma = this.curIn;
			}
		}
	}
	this.changedOut = false;
	if (typeof params.outGamma === 'number') {
		if (params.outGamma !== 9999) {
			if (params.outGamma !== this.curOut) {
				out.changedGamma = true;
				this.changedOut = true;
			}
			this.curOut = params.outGamma;
			out.outGamma = this.curOut;
			if (this.gammas[this.curOut].cat === 3) {
				this.nul = true;
			} else {
				this.nul = false;
			}
		} else {
			if (typeof params.outLinGamma === 'number') {
				if (params.outLinGamma !== this.curOut) {
					out.changedGamma = true;
					this.changedOut = true;
				}
				this.curOut = params.outLinGamma;
				out.outLinGamma = this.curOut;
				this.nul = false;
			}
		}
	}
	if (typeof params.defGamma === 'number') {
		var max = this.gammas.length;
		for (var j = 0; j < max; j++) {
			if (defGamma == this.gammas[j].name) {
				this.curIn = j;
				break;
			}
		}
		this.eiMult = Math.pow(2,this.stopShift);
	}
	if (typeof params.newISO === 'number') {
		var max = this.gammas.length;
		for (var j = 0; j < max; j++) {
			this.gammas[j].changeISO(params.newISO);
		}
		if (typeof params.natISO === 'number' && typeof params.camType === 'number' && params.camType === 0) {
			this.eiMult = params.newISO / params.natISO;
		}
	}
	if (typeof params.stopShift === 'number') {
		this.eiMult = Math.pow(2,params.stopShift);
	}
	out.eiMult = this.eiMult;
	if (typeof params.inL === 'boolean') {
		this.inL = params.inL;
	}
	if (typeof params.outL === 'boolean') {
		this.outL = params.outL;
	}
	if (typeof params.scaleMin === 'number' && typeof params.scaleMax === 'number') {
		this.sMin = params.scaleMin;
		this.sMax = params.scaleMax;
		if (this.sMin !== 0 || this.sMax !== 1) {
			this.sIn = true;
		} else {
			this.sIn = false;
		}
	}
	if (typeof params.clip === 'boolean') {
		this.clip = params.clip;
		out.clip = this.clip;
	}
	if (typeof params.bClip === 'number') {
		this.bClip = params.bClip;
		this.wClip = params.wClip;
	}
	if (typeof params.tweaks === 'boolean') {
		this.tweaks = params.tweaks;
	} else {
		this.tweaks = false;
	}
	out.twkASCCDL = this.setASCCDL(params);
	out.twkBlkHi = this.setBlkHi(params);

	if (typeof params.isTrans === 'boolean') {
		this.isTrans = params.isTrans;
	}
	this.ver = params.v;
	out.v = this.ver;
	return out;
};
LUTGamma.prototype.oneDCalc = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver, start: i.start, vals: i.vals, dim: i.dim};
	var s = i.start;
	var max = i.vals;
	var o = new Float64Array(max*3);
	var d = i.dim -1;
	var cMin,cMax;
	if (this.outL) {
		cMin = (this.bClip - 64)/876;
		cMax = (this.wClip - 64)/876;
	} else {
		cMin = this.bClip / 1023;
		cMax = this.wClip / 1023;
	}
	if (this.clip && cMin<0) {
		cMin = 0;
	}
	if (this.clip && cMax>1) {
		cMax = 1;
	}
	var k;
	if (this.nul) {
		if (this.inL) {
			if (this.outL) {
				for (var j=0; j<max; j++) {
					k = (s+j)/d; // between 0-1.0
					if (this.sIn) {
						k = (k*(this.sMax-this.sMin)) + this.sMin;
					}
					o[(j*3)] = Math.min(cMax,Math.max(cMin,k));
					o[(j*3)+1] = o[(j*3)];
					o[(j*3)+2] = o[(j*3)];
				}
			} else {
				for (var j=0; j<max; j++) {
					k = (s+j)/d; // between 0-1.0
					if (this.sIn) {
						k = (k*(this.sMax-this.sMin)) + this.sMin;
					}
					o[(j*3)] = Math.min(cMax,Math.max(cMin,((876*k)+64)/1023));
					o[(j*3)+1] = o[(j*3)];
					o[(j*3)+2] = o[(j*3)];
				}
			}
		} else {
			if (this.outL) {
				for (var j=0; j<max; j++) {
					k = (s+j)/d; // between 0-1.0
					if (this.sIn) {
						k = (k*(this.sMax-this.sMin)) + this.sMin;
					}
					o[(j*3)] = Math.min(cMax,Math.max(cMin,((1023*k)-64)/876));
					o[(j*3)+1] = o[(j*3)];
					o[(j*3)+2] = o[(j*3)];
				}
			} else {
				for (var j=0; j<max; j++) {
					k = (s+j)/d; // between 0-1.0
					if (this.sIn) {
						k = (k*(this.sMax-this.sMin)) + this.sMin;
					}
					o[(j*3)] = Math.min(cMax,Math.max(cMin,k));
					o[(j*3)+1] = o[(j*3)];
					o[(j*3)+2] = o[(j*3)];
				}
			}
		}
	} else {
		var l;
		for (var j=0; j<max; j++) {
			k = (s+j)/d; // between 0-1.0
			if (this.sIn) {
				k = (k*(this.sMax-this.sMin)) + this.sMin;
			}
			if (this.inL) {
				o[(j*3)] = this.gammas[this.curIn].linFromLegal(k)*this.eiMult;
			} else {
				o[(j*3)] = this.gammas[this.curIn].linFromData(k)*this.eiMult;
			}
			if (this.doASCCDL) {
				// Green
				l = o[(j*3)];
				l = (l*this.asc[1])+this.asc[4];
				l = ((l<0)?l:Math.pow(l,this.asc[7]));
				o[(j*3)+1] = (isNaN(l)?0:l);
				// Blue
				l = o[(j*3)];
				l = (l*this.asc[2])+this.asc[5];
				l = ((l<0)?l:Math.pow(l,this.asc[8]));
				o[(j*3)+2] = (isNaN(l)?0:l);
				// Red
				l = o[(j*3)];
				l = (l*this.asc[0])+this.asc[3];
				l = ((l<0)?l:Math.pow(l,this.asc[6]));
				o[(j*3)] = (isNaN(l)?0:l);
			}
			if (this.outL) {
				o[(j*3)] = this.gammas[this.curOut].linToLegal(o[(j*3)]);
				if (this.doASCCDL) {
					o[(j*3)+1] = this.gammas[this.curOut].linToLegal(o[(j*3)+1]);
					o[(j*3)+2] = this.gammas[this.curOut].linToLegal(o[(j*3)+2]);
					if (this.doBlkHi) {
						o[(j*3)] = (o[(j*3)] * this.al) + this.bl;
						o[(j*3)+1] = (o[(j*3)+1] * this.al) + this.bl;
						o[(j*3)+2] = (o[(j*3)+2] * this.al) + this.bl;
					}
				} else {
					if (this.doBlkHi) {
						o[(j*3)] = (o[(j*3)] * this.al) + this.bl;
					}
					o[(j*3)+1] = o[(j*3)];
					o[(j*3)+2] = o[(j*3)];
				}
			} else {
				o[(j*3)] = this.gammas[this.curOut].linToData(o[(j*3)]);
				if (this.doASCCDL) {
					o[(j*3)+1] = this.gammas[this.curOut].linToData(o[(j*3)+1]);
					o[(j*3)+2] = this.gammas[this.curOut].linToData(o[(j*3)+2]);
					if (this.doBlkHi) {
						o[(j*3)] = (o[(j*3)] * this.ad) + this.bd;
						o[(j*3)+1] = (o[(j*3)+1] * this.ad) + this.bd;
						o[(j*3)+2] = (o[(j*3)+2] * this.ad) + this.bd;
					}
				} else {
					if (this.doBlkHi) {
						o[(j*3)] = (o[(j*3)] * this.ad) + this.bd;
					}
					o[(j*3)+1] = o[(j*3)];
					o[(j*3)+2] = o[(j*3)];
				}
			}
			o[ (j*3) ] = Math.min(cMax,Math.max(cMin,o[ (j*3) ]));
			o[(j*3)+1] = Math.min(cMax,Math.max(cMin,o[(j*3)+1]));
			o[(j*3)+2] = Math.min(cMax,Math.max(cMin,o[(j*3)+2]));
		}
	}
	out.o = o.buffer;
	out.to = ['o'];
	return out;
};
LUTGamma.prototype.laCalcRGB = function(p,t,i) {
	var dim = i.dim;
	var d = dim -1;
	var max = dim*dim*dim*3;
	var c = new Float64Array(max);
	var buff = c.buffer;
	var j=0;
	for (var B=0; B<dim; B++) {
		for (var G=0; G<dim; G++) {
			for (var R=0; R<dim; R++) {
				c[ j ] = R/d;
				c[j+1] = G/d;
				c[j+2] = B/d;
				j += 3;
			}
		}
	}
	this.gammas[this.SL3].linFromD(buff);
	var out = { p: p, t: t+20, v: this.ver };
	out.dim = i.dim;
	out.legIn = i.legIn;
	out.gamma = i.gamma;
	out.gamut = i.gamut;
	out.o = buff;
	out.to = ['o'];
	return out;
};
LUTGamma.prototype.inCalcRGB = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver, R:i.R, G:i.G, B:i.B, vals: i.vals, dim: i.dim, eiMult: this.eiMult};
	var B = i.B;
	var max = i.dim;
	var o = new Float64Array(i.vals*3);
	var d = i.dim -1;
	if (this.nul) {
		if (this.inL) {
			if (this.outL) {
				for (var G=0; G<max; G++) {
					for (var R=0; R<max; R++) {
						var j = (R+(G*max))*3;
						if (this.sIn) {
							o[(j*3)] = ((R/d)*(this.sMax-this.sMin)) + this.sMin;
							o[(j*3)+1] = ((G/d)*(this.sMax-this.sMin)) + this.sMin;
							o[(j*3)+2] = ((B/d)*(this.sMax-this.sMin)) + this.sMin;
						} else {
							o[(j*3)] = R/d;
							o[(j*3)+1] = G/d;
							o[(j*3)+2] = B/d;
						}
					}
				}
			} else {
				for (var G=0; G<max; G++) {
					for (var R=0; R<max; R++) {
						var j = (R+(G*max))*3;
						if (this.sIn) {
							o[ j ] = ((876*(((R/d)*(this.sMax-this.sMin)) + this.sMin))+64)/1023;
							o[j+1] = ((876*(((G/d)*(this.sMax-this.sMin)) + this.sMin))+64)/1023;
							o[j+2] = ((876*(((B/d)*(this.sMax-this.sMin)) + this.sMin))+64)/1023;
						} else {
							o[ j ] = ((876*(R/d))+64)/1023;
							o[j+1] = ((876*(G/d))+64)/1023;
							o[j+2] = ((876*(B/d))+64)/1023;
						}
					}
				}
			}
		} else {
			if (this.outL) {
				for (var G=0; G<max; G++) {
					for (var R=0; R<max; R++) {
						var j = (R+(G*max))*3;
						if (this.sIn) {
							o[ j ] = ((1023*(((R/d)*(this.sMax-this.sMin)) + this.sMin))-64)/876;
							o[j+1] = ((1023*(((G/d)*(this.sMax-this.sMin)) + this.sMin))-64)/876;
							o[j+2] = ((1023*(((B/d)*(this.sMax-this.sMin)) + this.sMin))-64)/876;
						} else {
							o[ j ] = ((1023*R/d)-64)/876;
							o[j+1] = ((1023*G/d)-64)/876;
							o[j+2] = ((1023*B/d)-64)/876;
						}
					}
				}
			} else {
				for (var G=0; G<max; G++) {
					for (var R=0; R<max; R++) {
						var j = (R+(G*max))*3;
						if (this.sIn) {
							o[ j ] = ((R/d)*(this.sMax-this.sMin)) + this.sMin;
							o[j+1] = ((G/d)*(this.sMax-this.sMin)) + this.sMin;
							o[j+2] = ((B/d)*(this.sMax-this.sMin)) + this.sMin;
						} else {
							o[ j ] = R/d;
							o[j+1] = G/d;
							o[j+2] = B/d;
						}
					}
				}
			}
		}
	} else {
		if (this.inL) {
			for (var G=0; G<max; G++) {
				for (var R=0; R<max; R++) {
					var j = (R+(G*max))*3;
					if (this.sIn) {
						o[ j ] = this.gammas[this.curIn].linFromLegal(((R/d)*(this.sMax-this.sMin)) + this.sMin);
						o[j+1] = this.gammas[this.curIn].linFromLegal(((G/d)*(this.sMax-this.sMin)) + this.sMin);
						o[j+2] = this.gammas[this.curIn].linFromLegal(((B/d)*(this.sMax-this.sMin)) + this.sMin);
					} else {
						o[ j ] = this.gammas[this.curIn].linFromLegal(R/d);
						o[j+1] = this.gammas[this.curIn].linFromLegal(G/d);
						o[j+2] = this.gammas[this.curIn].linFromLegal(B/d);
					}
				}
			}
		} else {
			for (var G=0; G<max; G++) {
				for (var R=0; R<max; R++) {
					var j = (R+(G*max))*3;
					if (this.sIn) {
						o[ j ] = this.gammas[this.curIn].linFromData(((R/d)*(this.sMax-this.sMin)) + this.sMin);
						o[j+1] = this.gammas[this.curIn].linFromData(((G/d)*(this.sMax-this.sMin)) + this.sMin);
						o[j+2] = this.gammas[this.curIn].linFromData(((B/d)*(this.sMax-this.sMin)) + this.sMin);
					} else {
						o[ j ] = this.gammas[this.curIn].linFromData(R/d);
						o[j+1] = this.gammas[this.curIn].linFromData(G/d);
						o[j+2] = this.gammas[this.curIn].linFromData(B/d);
					}
				}
			}
		}
	}
	out.o = o.buffer;
	out.to = ['o'];
	return out;
};
LUTGamma.prototype.outCalcRGB = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver, R:i.R, G:i.G, B:i.B, vals: i.vals, dim: i.dim };
	var o = new Float64Array(i.o);
	var cMin,cMax;
	if (this.outL) {
		cMin = (this.bClip - 64)/876;
		cMax = (this.wClip - 64)/876;
	} else {
		cMin = this.bClip / 1023;
		cMax = this.wClip / 1023;
	}
	if (this.clip && cMin<0) {
		cMin = 0;
	}
	if (this.clip && cMax>1) {
		cMax = 1;
	}
	var max = o.length;
	if (this.nul) {
		for (var j=0; j<max; j++) {
			o[j] = Math.min(cMax,Math.max(cMin,o[j]));
		}
	} else {
		var fc;
		if (i.doFC) {
			fc = new Uint8Array(i.fc);
		}
		if (this.doBlkHi) {
			if (this.outL) {
				for (var j=0; j<max; j += 3) {
					o[ j ] = (this.gammas[this.curOut].linToLegal(o[ j ])*this.al)+this.bl;
					o[j+1] = (this.gammas[this.curOut].linToLegal(o[j+1])*this.al)+this.bl;
					o[j+2] = (this.gammas[this.curOut].linToLegal(o[j+2])*this.al)+this.bl;
					if (i.doFC) {
						switch(fc[Math.round(j/3)]) {
							case 0: o[ j ] = 0.75;	o[j+1] = 0;		o[j+2] = 0.75;	// Purple
								break;
							case 1: o[ j ] = 0;		o[j+1] = 0;		o[j+2] = 0.75;	// Blue
								break;
							case 3: o[ j ] = 0;		o[j+1] = 0.7;	o[j+2] = 0;		// Green
								break;
							case 5: o[ j ] = 0.75;	o[j+1] = 0.35;	o[j+2] = 0.35;	// Pink
								break;
							case 7: o[ j ] = 0.9;	o[j+1] = 0.45;	o[j+2] = 0;		// Orange
								break;
							case 9: o[ j ] = 0.7;	o[j+1] = 0.7;	o[j+2] = 0;		// Yellow
								break;
							case 10: o[ j ] = 0.75;	o[j+1] = 0;		o[j+2] = 0;		// Red
								break;
						}
					}
					o[ j ] = Math.min(cMax,Math.max(cMin,o[ j ]));
					o[j+1] = Math.min(cMax,Math.max(cMin,o[j+1]));
					o[j+2] = Math.min(cMax,Math.max(cMin,o[j+2]));
				}
			} else {
				for (var j=0; j<max; j += 3) {
					o[ j ] = (this.gammas[this.curOut].linToData(o[ j ])*this.ad)+this.bd;
					o[j+1] = (this.gammas[this.curOut].linToData(o[j+1])*this.ad)+this.bd;
					o[j+2] = (this.gammas[this.curOut].linToData(o[j+2])*this.ad)+this.bd;
					if (i.doFC) {
						switch(fc[Math.round(j/3)]) {
							case 0: o[ j ] = 0.7048; o[j+1] = 0.0626; o[j+2] = 0.7048;	// Purple
									break;
							case 1: o[ j ] = 0.0626; o[j+1] = 0.0626; o[j+2] = 0.7048;	// Blue
									break;
							case 3: o[ j ] = 0.0626; o[j+1] = 0.6620; o[j+2] = 0.0626;	// Green
									break;
							case 5: o[ j ] = 0.7048; o[j+1] = 0.3623; o[j+2] = 0.3623;	// Pink
									break;
							case 7: o[ j ] = 0.8330; o[j+1] = 0.4480; o[j+2] = 0.0626;	// Orange
									break;
							case 9: o[ j ] = 0.6620; o[j+1] = 0.6620; o[j+2] = 0.0626;	// Yellow
									break;
							case 10: o[ j ] = 0.7048;o[j+1] = 0.0626; o[j+2] = 0.0626;	// Red
									break;
						}
					}
					o[ j ] = Math.min(cMax,Math.max(cMin,o[ j ]));
					o[j+1] = Math.min(cMax,Math.max(cMin,o[j+1]));
					o[j+2] = Math.min(cMax,Math.max(cMin,o[j+2]));
				}
			}
		} else {
			if (this.outL) {
				for (var j=0; j<max; j += 3) {
					o[ j ] = this.gammas[this.curOut].linToLegal(o[ j ]);
					o[j+1] = this.gammas[this.curOut].linToLegal(o[j+1]);
					o[j+2] = this.gammas[this.curOut].linToLegal(o[j+2]);
					if (i.doFC) {
						switch(fc[Math.round(j/3)]) {
							case 0: o[ j ] = 0.75;	o[j+1] = 0;		o[j+2] = 0.75;	// Purple
								break;
							case 1: o[ j ] = 0;		o[j+1] = 0;		o[j+2] = 0.75;	// Blue
								break;
							case 3: o[ j ] = 0;		o[j+1] = 0.7;	o[j+2] = 0;		// Green
								break;
							case 5: o[ j ] = 0.75;	o[j+1] = 0.35;	o[j+2] = 0.35;	// Pink
								break;
							case 7: o[ j ] = 0.9;	o[j+1] = 0.45;	o[j+2] = 0;		// Orange
								break;
							case 9: o[ j ] = 0.7;	o[j+1] = 0.7;	o[j+2] = 0;		// Yellow
								break;
							case 10: o[ j ] = 0.75;	o[j+1] = 0;		o[j+2] = 0;		// Red
								break;
						}
					}
					o[ j ] = Math.min(cMax,Math.max(cMin,o[ j ]));
					o[j+1] = Math.min(cMax,Math.max(cMin,o[j+1]));
					o[j+2] = Math.min(cMax,Math.max(cMin,o[j+2]));
				}
			} else {
				for (var j=0; j<max; j += 3) {
					o[ j ] = this.gammas[this.curOut].linToData(o[ j ]);
					o[j+1] = this.gammas[this.curOut].linToData(o[j+1]);
					o[j+2] = this.gammas[this.curOut].linToData(o[j+2]);
					if (i.doFC) {
						switch(fc[Math.round(j/3)]) {
							case 0: o[ j ] = 0.7048; o[j+1] = 0.0626; o[j+2] = 0.7048;	// Purple
									break;
							case 1: o[ j ] = 0.0626; o[j+1] = 0.0626; o[j+2] = 0.7048;	// Blue
									break;
							case 3: o[ j ] = 0.0626; o[j+1] = 0.6620; o[j+2] = 0.0626;	// Green
									break;
							case 5: o[ j ] = 0.7048; o[j+1] = 0.3623; o[j+2] = 0.3623;	// Pink
									break;
							case 7: o[ j ] = 0.8330; o[j+1] = 0.4480; o[j+2] = 0.0626;	// Orange
									break;
							case 9: o[ j ] = 0.6620; o[j+1] = 0.6620; o[j+2] = 0.0626;	// Yellow
									break;
							case 10: o[ j ] = 0.7048;o[j+1] = 0.0626; o[j+2] = 0.0626;	// Red
									break;
						}
					}
					o[ j ] = Math.min(cMax,Math.max(cMin,o[ j ]));
					o[j+1] = Math.min(cMax,Math.max(cMin,o[j+1]));
					o[j+2] = Math.min(cMax,Math.max(cMin,o[j+2]));
				}
			}
		}
	}
	out.o = o.buffer;
	out.to = ['o'];
	return out;
};
LUTGamma.prototype.getLists = function(p,t) {
	return {
		p: p,
		t: t+20,
		v: this.ver,
		inList: this.inList,
		outList: this.outList,
		linList: this.linList,
		catList: this.catList,
		rec709: this.rec709,
		LA: this.LA
	};
};
LUTGamma.prototype.setLA = function(p,t,i) {
	this.gammas[this.LA].setLUT(i);
	return { p: p, t:t+20, v: this.ver, i: i.title };
};
LUTGamma.prototype.setLATitle = function(p,t,i) {
	this.gammas[this.LA].setTitle(i);
	return { p: p, t:t+20, v: this.ver, i: i };
};
LUTGamma.prototype.SL3Val = function(p,t,i) {
	var m = i.dim;
	var d = m-1;
	var c = new Float64Array(m);
	var buff = c.buffer;
	for (var j=0; j<m; j++) {
		c[j] = j/d;
	}
	this.gammas[this.SL3].linFromD(buff);
	if (i.legIn) {
		this.gammas[i.gamma].linToL(buff);
	} else {
		this.gammas[i.gamma].linToD(buff);
	}
	var out = { p: p, t: t+20, v: this.ver, o: buff};
	out.dim = i.dim;
	out.legIn = i.legIn;
	out.gamma = i.gamma;
	out.to = ['o'];
	return out;
};
LUTGamma.prototype.laCalcInput = function(p,t,i) {
	var max = i.dim;
	var o = new Float64Array(i.o);
	var max = o.length;
	if (i.legIn) {
		for (var j=0; j<max; j++) {
			o[j] = this.gammas[i.gamma].linToLegal(o[j]);
		}
	} else {
		for (var j=0; j<max; j++) {
			o[j] = this.gammas[i.gamma].linToData(o[j]);
		}
	}
	var out = { p: p, t: t+20, v: this.ver};
	out.dim = i.dim;
	out.legIn = i.legIn;
	out.gamma = i.gamma;
	out.o = o.buffer;
	out.to = ['o'];
	return out;
};
LUTGamma.prototype.ioNames = function(p,t) {
	var out = {};
	out.inName = this.gammas[this.curIn].name;
	out.outName = this.gammas[this.curOut].name;
	if (this.gammas[this.curIn].cat === 1) {
		out.inG = this.gammas[this.curIn].gamma;
	}
	if (this.gammas[this.curOut].cat === 1) {
		out.outG = this.gammas[this.curOut].gamma;
	}
	return {p: p, t: t+20, v: this.ver, o: out};
};
LUTGamma.prototype.chartVals = function(p,t,i) {
	var out = {p: p, t: t+20, v: this.ver};
	var m = 129;
	var d = m-1;
	var k;
	var refX = new Float64Array(m);
	var refIn = new Float64Array(m);
	var stopX = new Float64Array(m);
	var stopIn = new Float64Array(m);
	var lutIn = new Float64Array(m);
	var lutOut = new Float64Array(m);
	var colIn = new Float64Array(m);
	for (var j=0; j<m; j++) {
		k = j/d;
		refX[j] = 14*k;
		refIn[j] = refX[j]/0.9;
		stopX[j] = (18*k)-9;
		stopIn[j] = Math.pow(2,stopX[j]) / 5;
		lutIn[j] = k;
		lutOut[j] = ((k*1023) - 64)/876;
		colIn[j] = k;
	}
	var refOut = new Float64Array(refIn);
	out.curIn = this.curIn;
	out.curOut = this.curOut;
	this.gammas[this.curIn].linToL(refIn.buffer);
	var stopOut = new Float64Array(stopIn);
	this.gammas[this.curIn].linToL(stopIn.buffer);
	this.gammas[this.curIn].linFromL(colIn.buffer);
	if (this.nul) {
		refOut = new Float64Array(refIn);
		stopOut = new Float64Array(stopIn);
	} else {
		this.gammas[this.curIn].linFromL(lutOut.buffer);
		for (var j=0; j<m; j++) {
			refOut[j] *= this.eiMult;
			stopOut[j] *= this.eiMult;
			lutOut[j] *= this.eiMult;
		}
		if (this.doASCCDL) {
			this.ASCCDL(refOut.buffer);
			this.ASCCDL(stopOut.buffer);
			this.ASCCDL(lutOut.buffer);
		}
		this.gammas[this.curOut].linToL(refOut.buffer);
		this.gammas[this.curOut].linToL(stopOut.buffer);
		this.gammas[this.curOut].linToL(lutOut.buffer);
		if (this.doBlkHi) {
			for (var j=0; j<m; j++) {
				refOut[j] = (refOut[j] * this.al) + this.bl;
				stopOut[j] = (stopOut[j] * this.al) + this.bl;
				lutOut[j] = (lutOut[j] * this.al) + this.bl;
			}
		}
	}
	var table = new Float64Array([0,0.18,0.38,0.44,0.9,7.2,13.5]);
	for (var j=0; j<7; j++) {
		table[j] /= 0.9;
	}
	if (this.nul) {
		this.gammas[this.curIn].linToL(table.buffer);
	} else {
		if (this.doASCCDL) {
			this.ASCCDL(table.buffer);
		}
		this.gammas[this.curOut].linToL(table.buffer);
		if (this.doBlkHi) {
			for (var j=0; j<7; j++) {
				table[j] = (table[j] * this.al) + this.bl;
			}
		}
	}
	out.m = m;
	out.refX = refX.buffer;
	out.refIn = refIn.buffer;
	out.refOut = refOut.buffer;
	out.stopX = stopX.buffer;
	out.stopIn = stopIn.buffer;
	out.stopOut = stopOut.buffer;
	out.lutIn = lutIn.buffer;
	out.lutOut = lutOut.buffer;
	out.colIn = colIn.buffer;
	out.colOut = colIn.buffer.slice(0);
	out.table = table.buffer;
	out.eiMult = this.eiMult;
	out.to = ['refX','refIn','refOut','stopX','stopIn','stopOut','lutIn','lutOut','colIn','table'];
	return out;
};
LUTGamma.prototype.preview = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver, leg:i.leg, line:i.line, upd: i.upd };
	var eiMult = 1;
	if (typeof i.eiMult === 'number') {
		eiMult = i.eiMult;
	}
	var f = new Float64Array(i.o);
	var max = Math.round(f.length/3);
	var o = new Uint8Array(max*4);
	var k=0;
	var l=0;
	if (this.nul) {
		for (var j=0; j<max; j++) {
			f[ l ] = Math.min(1.095,Math.max(-0.073,this.gammas[this.SL3].linToLegal(f[ l ])));
			f[l+1] = Math.min(1.095,Math.max(-0.073,this.gammas[this.SL3].linToLegal(f[l+1])));
			f[l+2] = Math.min(1.095,Math.max(-0.073,this.gammas[this.SL3].linToLegal(f[l+2])));
			o[ k ] = Math.min(255,Math.max(0,Math.round(f[ l ]*255)));
			o[k+1] = Math.min(255,Math.max(0,Math.round(f[l+1]*255)));
			o[k+2] = Math.min(255,Math.max(0,Math.round(f[l+2]*255)));
			o[k+3] = 255;
			k += 4;
			l += 3;
		}
	} else {
		var fc;
		var doASCCDL = false;
		if (!i.threeD && this.doASCCDL) {
			doASCCDL = true;
		}
		if (i.doFC) {
			fc = new Uint8Array(i.fc);
		}
		for (var j=0; j<max; j++) {
			f[ l ] *= eiMult;
			f[l+1] *= eiMult;
			f[l+2] *= eiMult;
			if (doASCCDL) {
				// Red
				f[ l ] = (f[ l ]*this.asc[0])+this.asc[3];
				f[ l ] = ((f[ l ]<0)?f[ l ]:Math.pow(f[ l ],this.asc[6]));
				f[ l ] = (isNaN(f[ l ])?0:f[ l ]);
				// Green
				f[l+1] = (f[l+1]*this.asc[1])+this.asc[4];
				f[l+1] = ((f[l+1]<0)?f[l+1]:Math.pow(f[l+1],this.asc[7]));
				f[l+1] = (isNaN(f[l+1])?0:f[l+1]);
				// Blue
				f[l+2] = (f[l+2]*this.asc[2])+this.asc[5];
				f[l+2] = ((f[l+2]<0)?f[l+2]:Math.pow(f[l+2],this.asc[8]));
				f[l+2] = (isNaN(f[l+2])?0:f[l+2]);
			}
			f[ l ] = this.gammas[this.curOut].linToLegal(f[ l ]);
			f[l+1] = this.gammas[this.curOut].linToLegal(f[l+1]);
			f[l+2] = this.gammas[this.curOut].linToLegal(f[l+2]);
			if (this.doBlkHi) {
				f[ l ] = (f[ l ] * this.al) + this.bl;
				f[l+1] = (f[l+1] * this.al) + this.bl;
				f[l+2] = (f[l+2] * this.al) + this.bl;
			}
			f[ l ] = Math.min(1.095,Math.max(-0.073,(f[ l ])));
			f[l+1] = Math.min(1.095,Math.max(-0.073,(f[l+1])));
			f[l+2] = Math.min(1.095,Math.max(-0.073,(f[l+2])));
			if (i.doFC) {
				switch(fc[j]) {
					case 0: f[ l ] = 0.75;	f[l+1] = 0;		f[l+2] = 0.75;	// Purple
							break;
					case 1: f[ l ] = 0;		f[l+1] = 0;		f[l+2] = 0.75;	// Blue
							break;
					case 3: f[ l ] = 0;		f[l+1] = 0.7;	f[l+2] = 0;		// Green
							break;
					case 5: f[ l ] = 0.75;	f[l+1] = 0.35;	f[l+2] = 0.35;	// Pink
							break;
					case 7: f[ l ] = 0.9;	f[l+1] = 0.45;	f[l+2] = 0;		// Orange
							break;
					case 9: f[ l ] = 0.7;	f[l+1] = 0.7;	f[l+2] = 0;		// Yellow
							break;
					case 10: f[ l ] = 0.75;	f[l+1] = 0;		f[l+2] = 0;		// Red
							break;
				}
			}
			if (i.leg) {
				o[ k ] = Math.min(255,Math.max(0,Math.round(f[ l ]*255)));
				o[k+1] = Math.min(255,Math.max(0,Math.round(f[l+1]*255)));
				o[k+2] = Math.min(255,Math.max(0,Math.round(f[l+2]*255)));
				o[k+3] = 255;
			} else {
				o[ k ] = Math.min(255,Math.max(0,Math.round(f[ l ]*239)));
				o[k+1] = Math.min(255,Math.max(0,Math.round(f[l+1]*239)));
				o[k+2] = Math.min(255,Math.max(0,Math.round(f[l+2]*239)));
				o[k+3] = 255;
			}
			k += 4;
			l += 3;
		}
	}
	out.o = o.buffer;
	out.f = f.buffer;
	out.to = ['o','f'];
	return out;
};
LUTGamma.prototype.previewLin = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver, gamma: i.gamma, gamut: i.gamut, legal: i.legal, i: i.i };
	var input = new Float64Array(i.i);
	var max = input.length;
	var o = new Float64Array(max);
	if (i.legal) {
		for (var j=0; j<max; j++) {
			o[j] = this.gammas[i.gamma].linFromLegal(input[j]);
		}
	} else {
		for (var j=0; j<max; j++) {
			o[j] = this.gammas[i.gamma].linFromData(input[j]);
		}
	}
	out.o = o.buffer;
	out.to = ['i','o'];
	return out;
};
LUTGamma.prototype.getPrimaries = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver };
	var c = new Float64Array(i.o);
	var o = new Float64Array(18);
	for (var j=0; j<18; j++) {
		o[j] = this.gammas[this.curOut].linToLegal(c[j]);
	}
	out.o = o.buffer;
	return out;
};
LUTGamma.prototype.psstColours = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver };
	var b = new Float64Array(i.b);
	var a = new Float64Array(i.a);
	var m = a.length;
	var before = new Uint8Array(m);
	var after = new Uint8Array(m);
	this.gammas[this.curOut].linToL(i.b);
	this.gammas[this.curOut].linToL(i.a);
	if (this.doBlkHi) {
		for (var j=0; j<m; j++) {
			before[j] = Math.min(255,Math.max(0,Math.round(((b[ j ] * this.al) + this.bl)*255)));
			after[j] = Math.min(255,Math.max(0,Math.round(((a[ j ] * this.al) + this.bl)*255)));
		}
	} else {
		for (var j=0; j<m; j++) {
			before[j] = Math.min(255,Math.max(0,Math.round(b[ j ]*255)));
			after[j] = Math.min(255,Math.max(0,Math.round(a[ j ]*255)));
		}
	}
	out.b = before.buffer;
	out.a = after.buffer;
	out.to = ['b','a'];
	return out;
};
LUTGamma.prototype.chartRGB = function(p,t,i) {
	var out = { p: p, t: t+20, v: this.ver, colIn: i.colIn, rIn: i.rIn, gIn: i.gIn, bIn: i.bIn, rOut: i.rOut, gOut: i.gOut, bOut: i.bOut, to: ['rIn','gIn','bIn','rOut','gOut','bOut']};
	this.gammas[this.curIn].linToD(i.rIn);
	this.gammas[this.curIn].linToD(i.gIn);
	this.gammas[this.curIn].linToD(i.bIn);
	this.gammas[this.curOut].linToL(i.rOut);
	this.gammas[this.curOut].linToL(i.gOut);
	this.gammas[this.curOut].linToL(i.bOut);
	var ra = new Float64Array(i.rOut);
	var ga = new Float64Array(i.gOut);
	var ba = new Float64Array(i.bOut);
	if (this.doBlkHi) {
		for (var j=0; j<m; j++) {
			ra[j] = (ra[j] * this.al) + this.bl;
			ga[j] = (ga[j] * this.al) + this.bl;
			ba[j] = (ba[j] * this.al) + this.bl;
		}
	}
	return out;
};
// Web worker messaging functions
function sendMessage(d) {
	if (gammas.isTrans && typeof d.to !== 'undefined') {
		var max = d.to.length;
		var objArray = [];
		for (var j=0; j < max; j++) {
			objArray.push(d[d.to[j]]);
		}
		postMessage(d,objArray);
	} else {
		postMessage(d);
	}
}
importScripts('lut.js');
var gammas = new LUTGamma();
var trans = false;
addEventListener('message', function(e) {
	var d = e.data;
	if (typeof d.t === 'undefined') {
	} else if (d.t !== 0 && d.t < 20 && d.v !== gammas.ver) {
		postMessage({p: d.p, t: d.t, v: d.v, resend: true, d: d.d});
	} else {
		switch (d.t) {
			case 0:	sendMessage(gammas.setParams(d.d));
					break;
			case 1: sendMessage(gammas.oneDCalc(d.p,d.t,d.d)); // Calculate 1D (gamma only) conversion from input to output
					break;
			case 2: sendMessage(gammas.laCalcRGB(d.p,d.t,d.d));
					break;
			case 3: sendMessage(gammas.inCalcRGB(d.p,d.t,d.d)); 
					break;
			case 4: sendMessage(gammas.outCalcRGB(d.p,d.t,d.d)); 
					break;
			case 5: sendMessage(gammas.getLists(d.p,d.t)); 
					break;
			case 6: sendMessage(gammas.setLA(d.p,d.t,d.d)); 
					break;
			case 7: sendMessage(gammas.setLATitle(d.p,d.t,d.d)); 
					break;
			case 8: sendMessage(gammas.SL3Val(d.p,d.t,d.d)); 
					break;
			case 9: sendMessage(gammas.laCalcInput(d.p,d.t,d.d)); 
					break;
			case 10:sendMessage(gammas.ioNames(d.p,d.t));
					break;
			case 11:sendMessage(gammas.chartVals(d.p,d.t));
					break;
			case 12:sendMessage(gammas.preview(d.p,d.t,d.d));
					break;
			case 14:sendMessage(gammas.previewLin(d.p,d.t,d.d));
					break;
			case 15:sendMessage(gammas.getPrimaries(d.p,d.t,d.d));
					break;
			case 16:sendMessage(gammas.psstColours(d.p,d.t,d.d));
					break;
			case 18:sendMessage(gammas.chartRGB(d.p,d.t,d.d));
					break;
		}
	}
}, false);
